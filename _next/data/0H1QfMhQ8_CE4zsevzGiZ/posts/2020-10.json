{"pageProps":{"membersPhotoUrl":{"@koba04":"/assets/photo/f8079885d680213e64e4d706daa4a5ee_400x400.jpeg","@pirosikick":"/assets/photo/a95b52be00e06cd293a6853bc36490bc_400x400.jpeg","@toshi__toma":"/assets/photo/fGX7e5wk_400x400.jpg","@zaki___yama":"/assets/photo/Q_ihmvTQ_400x400.png","@__sakito__":"/assets/photo/erghEqaW_400x400.png","@shisama_":"/assets/photo/A9M8G6DH_400x400.jpg","@nakajmg":"/assets/photo/EKNVNzOg_400x400.jpg","@b4h0_c4t":"/assets/photo/QySbTwnO_400x400.jpg","@__sosukesuzuki":"/assets/photo/7iJNhdua_400x400.jpg","@koh110":"/assets/photo/387943_158685184235470_100002819679575_201710_1252547332_n_400x400.jpg","@narirow":"/assets/photo/1mSWaTJY_400x400.jpeg"},"frontmatter":{"title":"Cybozu Frontend Monthly","date":"2020-10-27T17:00:00+09:00","slug":"2020-10","connpass":"https://cybozu.connpass.com/event/192820/","streamUrl":"https://www.youtube.com/watch?v=q6ReR_ClFrg","hashTag":"#サイボウズフロントエンドマンスリー","no":4,"members":[{"name":"@koba04","link":"https://twitter.com/koba04"},{"name":"@pirosikick","link":"https://twitter.com/pirosikick"},{"name":"@toshi__toma","link":"https://twitter.com/toshi__toma"},{"name":"@zaki___yama","link":"https://twitter.com/zaki___yama"},{"name":"@__sakito__","link":"https://twitter.com/__sakito__"},{"name":"@shisama_","link":"https://twitter.com/shisama_"},{"name":"@nakajmg","link":"https://twitter.com/nakajmg"},{"name":"@b4h0_c4t","link":"https://twitter.com/b4h0_c4t"},{"name":"@__sosukesuzuki","link":"https://twitter.com/__sosukesuzuki"}],"guest":[{"name":"@koh110","link":"https://twitter.com/koh110"},{"name":"@narirow","link":"https://twitter.com/narirow"}]},"html":"<h3 id=\"introducing-cloudflare-browser-isolation-beta\"><a href=\"#introducing-cloudflare-browser-isolation-beta\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://blog.cloudflare.com/browser-beta/\" target=\"_blank\" rel=\"nofollow\">Introducing Cloudflare Browser Isolation beta</a></h3>\n<ul>\n<li>共有者: @zaki___yama</li>\n</ul>\n<p>Cloudflare が Browser Isolation 機能をリリース。\n現在はベータ版で、 <a href=\"https://www.cloudflare.com/ja-jp/teams/lp/browser-isolation/\" target=\"_blank\" rel=\"nofollow\">こちらの waitlist</a> から申し込む必要があります。</p>\n<p>記事を一通り読んだ後に気が付きましたが、1 月頃にもこのあたりの話が公式ブログから出てました。<br>\n<a href=\"https://blog.cloudflare.com/jp/cloudflare-and-remote-browser-isolation-jp/\" target=\"_blank\" rel=\"nofollow\">Cloudflare とリモートブラウザー分離</a><br>\nここで紹介されているものが遂にベータリリースしましたよ、という趣旨のようです。</p>\n<h4 id=\"browser-isolation-とは\"><a href=\"#browser-isolation-%E3%81%A8%E3%81%AF\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Browser Isolation とは</h4>\n<p>ブラウザをエンドユーザーの端末ではなくクラウド上の VM で走らせるサービス。<br>\nこれ自体は Cloudflare 独自のものではなく、類似のソリューションは以前からもあったようです（知らなかった）。</p>\n<p><a href=\"https://www.proofpoint.com/jp/products/advanced-threat-protection/browser-isolation\" target=\"_blank\" rel=\"nofollow\">https://www.proofpoint.com/jp/products/advanced-threat-protection/browser-isolation</a><br>\n<a href=\"https://www.asgent.co.jp/products/web-isolation.html\" target=\"_blank\" rel=\"nofollow\">https://www.asgent.co.jp/products/web-isolation.html</a></p>\n<h4 id=\"従来の-browser-isolation-の課題\"><a href=\"#%E5%BE%93%E6%9D%A5%E3%81%AE-browser-isolation-%E3%81%AE%E8%AA%B2%E9%A1%8C\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>従来の Browser Isolation の課題</h4>\n<h5 id=\"isolation-のアプローチ\"><a href=\"#isolation-%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%83%81\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Isolation のアプローチ</h5>\n<ul>\n<li>多くの Isolation サービスは以下の 2 つのアプローチのいずれかを採用しているが、どちらも欠点がありブラウザの利便性や柔軟性を損ねている\n<ol>\n<li>リモートブラウザのウィンドウをキャプチャし、画像としてエンドユーザーに送る\n<ul>\n<li>→ 遅い。フォームのテキストボックスへの入力など基本的なことを行うのも難しくしている</li>\n</ul>\n</li>\n<li>DOM 再構築。web ページを unpack し、中身を調べ、問題なければ repack してユーザーに送る</li>\n</ol>\n<ul>\n<li>→ 脅威を見逃したり、多くの場合まだ動作する形での repack に失敗する</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"ネットワーク\"><a href=\"#%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>ネットワーク</h5>\n<p>ユーザーの入力をリモートのデータセンターまで送信し、結果をディスプレイに戻すというやり取りが発生する。\nローカルと同じ体験を提供するためにはこれがミリ秒単位で行われる必要がある</p>\n<h4 id=\"cloudflare-browser-isolation-での解決\"><a href=\"#cloudflare-browser-isolation-%E3%81%A7%E3%81%AE%E8%A7%A3%E6%B1%BA\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Cloudflare Browser Isolation での解決</h4>\n<h5 id=\"isolation-のアプローチ-1\"><a href=\"#isolation-%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%83%81-1\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Isolation のアプローチ</h5>\n<p>↑ で挙げた 1, 2 のいずれでもないアプローチ方式を採用。\n画像のピクセル情報を送信する代わりに、ブラウザの描画コマンドを送信する。</p>\n<p>このあたりは冒頭にも書いた日本語の方のブログが詳しい。</p>\n<p><img src=\"https://blog.cloudflare.com/content/images/2020/01/image5-10.png\" alt=\"\"></p>\n<p>(画像は記事より引用: <a href=\"https://blog.cloudflare.com/content/images/2020/01/image5-10.png\" target=\"_blank\" rel=\"nofollow\">https://blog.cloudflare.com/content/images/2020/01/image5-10.png</a>)</p>\n<blockquote>\n<p>S2 Systems NVR テクノロジーは、リモート Chromium ブラウザーの Skia 描画コマンド ❶ をインターセプトし、トークン化して圧縮してから、ネットワーク経由で暗号化して ❷、ユーザーエンドポイントのデスクトップ上またはモバイルデバイス上でローカルで実行されている HTML5 対応 Web ブラウザー ❸（Chrome、Firefox、Safari など）に送信します。NVR によってキャプチャされた Skia API コマンドは、ラスタライズ化される前のものです。つまり、非常にコンパクトです。</p>\n</blockquote>\n<h5 id=\"ネットワーク-1\"><a href=\"#%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF-1\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>ネットワーク</h5>\n<p>Cloudflare が所有している世界 200 都市に広がるデータセンターを利用してこのソリューションを提供するので、ミリ秒単位での通信が可能。</p>\n<hr>\n<h3 id=\"libsass-is-deprecated\"><a href=\"#libsass-is-deprecated\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://sass-lang.com/blog/libsass-is-deprecated\" target=\"_blank\" rel=\"nofollow\">LibSass is Deprecated </a></h3>\n<ul>\n<li>共有者: @b4h0_c4t</li>\n</ul>\n<p>LibSass が非推奨になった話。</p>\n<p>重要なポイントは以下の通り</p>\n<ul>\n<li>新しいプロジェクトでは<a href=\"https://sass-lang.com/dart-sass\" target=\"_blank\" rel=\"nofollow\">DartSass</a>を推奨</li>\n<li>既存のプロジェクトも計画的な DartSass への移行を推奨</li>\n<li>今後新機能に対応する予定はない</li>\n<li>Node Sass も含め、主要なバグやセキュリティ・最新の Node.js との互換性対応は無期限で継続される。</li>\n</ul>\n<p>現状の実装では、min() max()などの一部 PlainCSS や Sass module system をサポートしておらず、DartSass との兼ね合いを鑑みて LibSass 側を非推奨にしたらしい。</p>\n<p>無期限にメンテナンスを続けると言っているが、コアチーム側は強く DartSass への移行を強調しているため、使っている人は早めに移行を始めた方が良さそう。</p>\n<hr>\n<h3 id=\"svelte-summit--rich-harris-futuristic-web-development\"><a href=\"#svelte-summit--rich-harris-futuristic-web-development\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://youtu.be/qSfdtmcZ4d0\" target=\"_blank\" rel=\"nofollow\">Svelte Summit | Rich Harris: Futuristic Web Development</a></h3>\n<ul>\n<li>共有者: @toshi__toma</li>\n</ul>\n<p>10/18 に Svelte のオンラインカンファレンス「Svelte Summit」が開催された。\nその中の「Rich Harris: Futuristic Web Development」が面白かったので紹介。</p>\n<p>Rich Harris: Futuristic Web Development</p>\n<ul>\n<li>主に Svelte の今後の開発環境についての話</li>\n<li>※ 公式の発表でもないし、保証するわけではない</li>\n<li>Svelte ベースの Web アプリケーションフレームワーク Sapper(React でいう Next.js)の v1 がリリースされることはない</li>\n<li>Sapper の代わりに、 <a href=\"https://www.npmjs.com/package/@sveltejs/kit\" target=\"_blank\" rel=\"nofollow\">@sveltejs/kit</a>を開発してる(まだプライベートリポジトリ)</li>\n<li>途中からは、@sveltejs/kit を使ったアプリ開発のデモ</li>\n<li>Rollup ではなく、<a href=\"https://www.snowpack.dev/\" target=\"_blank\" rel=\"nofollow\">Snowpack</a>を使った開発になる</li>\n<li>adapter という仕組みがあって、それでビルドの出力を変更できる\n<ul>\n<li>node, static, Netlify、その他メジャーな Faas をサポートする予定</li>\n</ul>\n</li>\n</ul>\n<p>あと、今月から Monthly で新機能やバグフィックスなどを紹介する \"What's new in Svelte\" シリーズが始まった。</p>\n<p><a href=\"https://svelte.dev/blog/whats-new-in-svelte-october-2020\" target=\"_blank\" rel=\"nofollow\">What's new in Svelte: October 2020</a></p>\n<hr>\n<h3 id=\"react-v1701\"><a href=\"#react-v1701\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://github.com/facebook/react/blob/master/CHANGELOG.md#1701-october-22-2020\" target=\"_blank\" rel=\"nofollow\">React v17.0.1</a></h3>\n<ul>\n<li>共有者: @koh110</li>\n</ul>\n<p>アップデート内容としては IE11 でクラッシュする問題を修正しただけです。</p>\n<p>Ref: <a href=\"https://github.com/facebook/react/pull/20071\" target=\"_blank\" rel=\"nofollow\">https://github.com/facebook/react/pull/20071</a></p>\n<p><code>Array.fill</code> は IE11 で動かないのでその修正。</p>\n<div class=\"remark-highlight\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> return new Array(TotalLanes).fill(initial);</span>\n<span class=\"token line\"></span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const laneMap = [];</span>\n<span class=\"token line\"></span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> for (let i = 0; i &#x3C; TotalLanes; i++) {</span>\n<span class=\"token line\"></span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   laneMap.push(initial);</span>\n<span class=\"token line\"></span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> }</span>\n<span class=\"token line\"></span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> return laneMap;</span></span>\n</code></pre></div>\n<p>面白いと思ったのは、配列の初期化方法によってパフォーマンスが変わるので <code>new Array(length)</code> を避けたこと。\n<a href=\"https://v8.dev/blog/elements-kinds#avoid-creating-holes\" target=\"_blank\" rel=\"nofollow\">https://v8.dev/blog/elements-kinds#avoid-creating-holes</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// これはよくない</span>\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 初期化するならこのほうがよい</span>\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 初期化する要素数がわからないときは push を使う</span>\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>someValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>someOtherValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://v8.dev/blog/elements-kinds#packed-vs.-holey-kinds\" target=\"_blank\" rel=\"nofollow\">https://v8.dev/blog/elements-kinds#packed-vs.-holey-kinds</a></p>\n<ul>\n<li>配列の要素には <code>PACKED_ELEMENTS(連続する要素)</code> と <code>HOLEY_ELEMENTS(穴あき要素)</code> がある</li>\n<li><code>PACKED</code> のほうが <code>HOLEY</code> より配列操作が効率的</li>\n<li>途中で配列に要素を飛ばし挿入すると <code>PACKED</code> から <code>HOLEY</code> になる（不可逆）</li>\n</ul>\n<p>知らなかったので記事中にある配列のアクセス方法などをそれぞれ試してみた。通常の使い方であればほぼ誤差レベル。（記事中にも記載がある）\n<a href=\"https://gist.github.com/koh110/13e3e8432b0abad9501b551e46e30b3f\" target=\"_blank\" rel=\"nofollow\">https://gist.github.com/koh110/13e3e8432b0abad9501b551e46e30b3f</a></p>\n<p>(記事中では途中に重い if 文などがある場合にパフォーマンス issue が出るらしい。検証コードがうまく書けない)</p>\n<p>検証コードを見る限りでは <code>new Array().map</code> でよさそうに見えてしまうが、なにか見落としているような気がする。</p>\n<p>Ref:</p>\n<p><a href=\"https://medium.com/sumup-engineering/optimize-your-js-code-using-googles-v8-internals-49955fd7d4a5\" target=\"_blank\" rel=\"nofollow\">PACKED_ELEMENTS について</a>\n<a href=\"https://dev.to/voodooattack/the-holey-array-problem-3pg8\" target=\"_blank\" rel=\"nofollow\">Holy Array について</a>\n<a href=\"https://github.com/babel/babel/issues/6233\" target=\"_blank\" rel=\"nofollow\">babel での同様の議論</a></p>\n<p><code>new Array(n)</code> は常に HOLEY_ELEMENTS を生成するように読み取れる。</p>\n<p>初期生成時の速度については触れていないので、途中の配列操作があった場合に PACKED_ELEMENTS のままにできるようにしたいという意味合いなら納得できる。\nTypeScript じゃないので生成された配列の使い方を強制できないので、効果がどこまであるかと考えると初期生成のコストで切り分ける余地はありな気がする。（今回は長さ 31 の固定長配列なので多分誤差）</p>\n<p>メモリの使用量に差が出るかと思ったけど、fill のほうが少し少ない（誤差程度）\n<a href=\"https://gist.github.com/koh110/4c77dbebccfc074ac7bb1764423d6803\" target=\"_blank\" rel=\"nofollow\">https://gist.github.com/koh110/4c77dbebccfc074ac7bb1764423d6803</a></p>\n<p><a href=\"https://stackoverflow.com/a/56949715\" target=\"_blank\" rel=\"nofollow\">V8 の開発者曰く心配するほどの差ではない。</a></p>\n<p>「Don't optimize for V8, let V8 optimize for you!」</p>\n<p>Ref: <a href=\"https://slidrio-decks.global.ssl.fastly.net/1259/original.pdf?1521622174\" target=\"_blank\" rel=\"nofollow\">PACKED の確認の仕方</a></p>\n<p>本筋とはずれるが、Holy Array についてのブログにあるように中身が実質的に DICTIONARY_ELEMENTS になってしまうような配列の場合、JSON.stringify でメモリ使用が跳ね上がってしまうのはうっかりやってしまいそうで怖いですよね。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">const arr = []\narra[0] = 0\narra[1] = 1\narra[2] = 2\nJSON.stringify(arr)\n// [0,1,2]\n\narr[9999] = &#x26;#39;evil&#x26;#39;\nJSON.stringify(arr)\n\n// [0,1,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null...</code></pre></div>\n<hr>\n<h3 id=\"chrome87-css-論理プロパティの追加\"><a href=\"#chrome87-css-%E8%AB%96%E7%90%86%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E8%BF%BD%E5%8A%A0\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://web.dev/logical-property-shorthands/\" target=\"_blank\" rel=\"nofollow\">Chrome87 CSS 論理プロパティの追加</a></h3>\n<ul>\n<li>共有者: @narirou</li>\n</ul>\n<p>Chrome87 で CSS 論理プロパティのショートハンド記法が使用できるようになりました。</p>\n<p>CSS 論理プロパティ(Logical Property)は、読む方向が異なる国際言語に対して利用できる、レイアウト制御の値です。端的にいうと、margin、padding の新しい設定方法です。</p>\n<p>これまでの <code>margin</code> や <code>padding</code> は、画面表示の上下右左という概念で出来ていましたが、この設定方法だとｍ読む方向が異なる言語で異なる CSS を当てる必要が出てきます。</p>\n<!-- 後でオリジナルに差し替える -->\n<p><img src=\"https://webdev.imgix.net/logical-property-shorthands/block-and-inline-visual.png\" alt=\"\"></p>\n<p>(画像は記事より引用: <a href=\"https://webdev.imgix.net/logical-property-shorthands/block-and-inline-visual.png\" target=\"_blank\" rel=\"nofollow\">https://webdev.imgix.net/logical-property-shorthands/block-and-inline-visual.png</a>)</p>\n<p>そこで検討されたのが、CSS 論理プロパティです。このプロパティでは、上下左右という概念ではなく、ボックスモデルの読み始め読み終わりをもとに、レイアウトの設定を入れることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-inline-start</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-inline-end</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-block-start</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token unit\">em</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-block-end</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token unit\">em</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>そして今回、先週リリースされた Chrome87 で、ショートハンド記法が使用できるようになりました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-block</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token unit\">em</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>現在はサポートされていないブラウザも多いので、本番に出すときはまだ<code>@supports</code> の CSS at-rule を使用して記述する必要があります。\nweb でこれまで書いてきたレイアウト方法に大きな変化が来るので、特に多言語対応を行っているサイトは認識しておくと良いかと思います。</p>\n<hr>\n<h3 id=\"ブラウザでプッシュ通知許可に制限がかかり、不正な場合サイトにペナルティが与えられます\"><a href=\"#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E8%A8%B1%E5%8F%AF%E3%81%AB%E5%88%B6%E9%99%90%E3%81%8C%E3%81%8B%E3%81%8B%E3%82%8A%E3%80%81%E4%B8%8D%E6%AD%A3%E3%81%AA%E5%A0%B4%E5%90%88%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%83%9A%E3%83%8A%E3%83%AB%E3%83%86%E3%82%A3%E3%81%8C%E4%B8%8E%E3%81%88%E3%82%89%E3%82%8C%E3%81%BE%E3%81%99\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://blog.chromium.org/2020/10/reducing-abusive-notification-content.html\" target=\"_blank\" rel=\"nofollow\">ブラウザでプッシュ通知許可に制限がかかり、不正な場合サイトにペナルティが与えられます</a></h3>\n<ul>\n<li>共有者: @narirou</li>\n</ul>\n<p>Web プッシュの通知ダイアログ、様々なサイトで掲出されて鬱陶しいなと思っていましたが、Chromium が対策に乗り出します。</p>\n<p>セーフブラウジングをしているのに通知許可を申請したり、通知許可を強要する UI を使用している場合に、不正なサイトのフラグが立てられます。</p>\n<p>ブロックされる 30 日前に Search Console 上に通知が届き、対処されない場合は Chromium で通知ダイアログが表示されなくなります。</p>\n<p>サイトを管理しているひとは気をつけたほうがいいでしょう。</p>\n<hr>\n<h3 id=\"node-v1500-current--nodejs\"><a href=\"#node-v1500-current--nodejs\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://nodejs.org/en/blog/release/v15.0.0/\" target=\"_blank\" rel=\"nofollow\">Node v15.0.0 (Current) | Node.js</a></h3>\n<ul>\n<li>共有者: @shisama_</li>\n</ul>\n<p>10/20 に Node.js v15 がリリースされました！大きな変更も多いです。</p>\n<ul>\n<li>npm 7</li>\n<li>V8 v8.6 ES2021 の機能追加\n<ul>\n<li>Promise.any and AggregateError</li>\n<li>String.prototype.replaceAll</li>\n<li>Logical assignment operators</li>\n</ul>\n</li>\n<li>Web Crypto API の追加</li>\n<li>AbortController の追加</li>\n<li>EventTarget の追加</li>\n<li>Unhandled Rejections が発生したときエラーになるように変更（終了ステータスが 1 に変わる）</li>\n<li>QUIC の実験的実装</li>\n<li>timers/promises の追加</li>\n<li>stream/promises の追加</li>\n<li>require('assert').strict を require('assert/strict') で読み込む</li>\n<li>require('dns').promises を require('dns/promises') で読み込む</li>\n<li>file URL の仕様追随</li>\n</ul>\n<p>日本語記事</p>\n<ul>\n<li><a href=\"https://shisama.hatenablog.com/entry/2020/10/21/004612\" target=\"_blank\" rel=\"nofollow\">Node.js v15 の主な変更点 - 別にしんどくないブログ</a></li>\n<li><a href=\"https://blog.watilde.com/2020/10/20/node-js-v15/\" target=\"_blank\" rel=\"nofollow\">10 月 20 日にメジャーアップデートとしてリリースされた Node.js v15 の紹介 | watilde's blog</a></li>\n<li><a href=\"https://blog.leko.jp/post/http-over-quic-on-nodejs15/\" target=\"_blank\" rel=\"nofollow\">Node.js の HTTP over QUIC(HTTP/3)を試す | WEB EGG</a></li>\n</ul>\n<hr>\n<h3 id=\"3-things-about-css-variables-you-might-not-know\"><a href=\"#3-things-about-css-variables-you-might-not-know\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://patrickbrosset.com/articles/2020-09-21-3-things-about-css-variables-you-might-not-know/\" target=\"_blank\" rel=\"nofollow\">3 things about CSS variables you might not know</a></h3>\n<ul>\n<li>\n<p>共有者: nakajmg</p>\n</li>\n<li>\n<p>CSS variables についてのお話</p>\n<ul>\n<li><code>var()</code> で undefined な変数を使用したときどうなるか</li>\n<li>フォールバックの動作</li>\n<li>DevTools まわり</li>\n</ul>\n</li>\n</ul>\n<p>などを解説している。</p>\n<h4 id=\"undefined-な変数を使用した時\"><a href=\"#undefined-%E3%81%AA%E5%A4%89%E6%95%B0%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E6%99%82\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>undefined な変数を使用した時</h4>\n<ul>\n<li>undefined な変数を使用しても読み込み/解析/レンダリングを妨げない</li>\n<li>変数はカスケーディングされる</li>\n<li>継承されるプロパティの場合は継承された値が使われる</li>\n<li>継承されないプロパティの場合は初期値が使われる</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">.my-class {\n  border: 1px solid var(--undefined-value);\n  color: var(--undefined-value);\n}</code></pre></div>\n<ul>\n<li><code>border</code> は継承されないので表示されない</li>\n<li><code>color</code> は継承されるので祖先をたどって値を探す</li>\n</ul>\n<h4 id=\"フォールバックの動作\"><a href=\"#%E3%83%95%E3%82%A9%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF%E3%81%AE%E5%8B%95%E4%BD%9C\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>フォールバックの動作</h4>\n<ul>\n<li><code>var()</code> にはフォールバック機能がある</li>\n<li><code>var()</code> は入れ子にできる</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">color: var(--theme-color, red);</code></pre></div>\n<ul>\n<li><code>--theme-color</code> が見つからなければ <code>red</code> が適用される</li>\n<li>CSS variables を使ってカスタマイズできるようなコンポーネントに使えるかも？</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">color: var(--foo, var(--bar, var(--baz, var(--are, var(--you, var(--crazy)))));</code></pre></div>\n<h4 id=\"devtools-まわり\"><a href=\"#devtools-%E3%81%BE%E3%82%8F%E3%82%8A\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>DevTools まわり</h4>\n<ul>\n<li>変数名がオートコンプリートされる</li>\n<li><code>var()</code> にマウスオーバーすると最終的な値が確認できる</li>\n<li>変数名が色の名前の場合に色見本が表示される\n<ul>\n<li>その値が色として使われるかどうか関係なく</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"meet-face-id-and-touch-id-for-the-web\"><a href=\"#meet-face-id-and-touch-id-for-the-web\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://webkit.org/blog/11312/meet-face-id-and-touch-id-for-the-web/\" target=\"_blank\" rel=\"nofollow\">Meet Face ID and Touch ID for the Web</a></h3>\n<ul>\n<li>共有者: pirosikick</li>\n</ul>\n<p>WWDC 2020 の<a href=\"https://developer.apple.com/videos/play/wwdc2020/10670/\" target=\"_blank\" rel=\"nofollow\">Meet Face ID and Touch ID for the web</a>の記事版。動画よりもコード多めで詳細に解説。図は動画のほうが多いので、動画もおすすめ。</p>\n<ul>\n<li>Web Authn API のオプションと Safari 上の UI がどう紐づくか</li>\n<li>仕様と違う点\n<ul>\n<li>Touch ID/Face ID を使った Web Authn API の呼び出しはユーザージェスチャーが必要</li>\n<li>互換性のため、Touch ID/Face ID 以外を使った Web Authn API の呼び出しはユーザージェスチャーが不要</li>\n<li>ユーザージェスチャーとは\n<ul>\n<li><code>touchend</code>, <code>click</code>, <code>doubleclick</code>等のイベントのコールバック内</li>\n<li>上記のコールバック内から呼び出した XHR、Fetch API のコールバック内</li>\n<li>Readable Stream はまだ未対応</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Apple Anonymous Attestation について</li>\n</ul>\n<p>iPhone ユーザーにとってポピュラーな Face ID が Web で使えることで Web Authn の普及が進みそうと思いました。</p>\n<hr>\n<h3 id=\"webpack-5-release-2020-10-10\"><a href=\"#webpack-5-release-2020-10-10\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://webpack.js.org/blog/2020-10-10-webpack-5-release/\" target=\"_blank\" rel=\"nofollow\">Webpack 5 release (2020-10-10)</a></h3>\n<ul>\n<li>共有者: @__sakito__</li>\n</ul>\n<p>参照：<a href=\"https://webpack.js.org/blog/2020-10-10-webpack-5-release/\" target=\"_blank\" rel=\"nofollow\">Webpack 5 release (2020-10-10)</a></p>\n<p>10/10 に webpack 5 がリリースされました 🎉</p>\n<p>webpack 5 のリリースは行われたが、まだバグが多くあり、webpack で使用する loader や plugin は対応が追いついていません。<br>\nパッと<a href=\"https://github.com/webpack/webpack/issues?q=is%3Aissue+is%3Aopen+label%3Awebpack-5\" target=\"_blank\" rel=\"nofollow\">webpack 5 関連の Issue</a>を眺めるだけでも、まだ多くの問題があることがわかります。<br>\nなので、webpack 5 を使用するのは安全にいきたければ 1,2 ヶ月ほど待ってもよいと思います。\nいまはこのバグ対応によりすでに webpack のバージョンは 5.2.0 になっています。</p>\n<h4 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://github.com/webpack/webpack-dev-server\" target=\"_blank\" rel=\"nofollow\">webpack-dev-server</a></h4>\n<p>現在の webpack-dev-server は webpack v5 対応のバージョンががまだリリースされてないので、動かないケースが何点かあります。</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/webpack/webpack-dev-server/issues/2759\" target=\"_blank\" rel=\"nofollow\">webpack cli v4 と webpack-dev-server を組み合わせた時に起きる問題についての Issue</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/webpack/webpack-dev-server/issues/2758\" target=\"_blank\" rel=\"nofollow\">browserslist 使用時のバグ</a></p>\n</li>\n</ul>\n<h4 id=\"webpack-cli\"><a href=\"#webpack-cli\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://github.com/webpack/webpack-cli\" target=\"_blank\" rel=\"nofollow\">webpack-cli</a></h4>\n<p>webpack v5 対応のため<a href=\"https://github.com/webpack/webpack-cli/releases/tag/webpack-cli%404.0.0\" target=\"_blank\" rel=\"nofollow\">v4 のリリース</a>はされていますが、上記でも書いている通り、webpack dev server と組み合わせるとバグがあります。</p>\n<p>webpack cli v4 から webpack-dev-server の起動を<code>webpack serve</code>コマンドに統合するようになっています。\n<a href=\"https://github.com/webpack/webpack-dev-server/pull/2772\" target=\"_blank\" rel=\"nofollow\">webpack serve コマンドの案内を促すエラー文の実装</a></p>\n<p>新機能として<code>webpack --analyze</code>コマンドで、<a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\" target=\"_blank\" rel=\"nofollow\">webpack-bundle-analyzer</a>を使用して、各モジュールのバンドルサイズを可視化することができるローカルサーバーを立ち上げることができます。便利。</p>\n<h4 id=\"主な変更点\"><a href=\"#%E4%B8%BB%E3%81%AA%E5%A4%89%E6%9B%B4%E7%82%B9\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>主な変更点</h4>\n<p><a href=\"https://webpack.js.org/blog/2020-10-10-webpack-5-release/#major-changes-removals\" target=\"_blank\" rel=\"nofollow\">https://webpack.js.org/blog/2020-10-10-webpack-5-release/#major-changes-removals</a></p>\n<p>このような変更点があります。</p>\n<ul>\n<li>永続的なキャッシング</li>\n<li>TS の対応で<code>@types/webpack</code>が不要になり、<code>import { WebpackOptionsNormalized } from 'webpack';</code> で型を import できるようになった。(ファイル名を webpack.config.ts にする必要がある)</li>\n<li>Tree Shaking の最適化が入りバンドルサイズ縮小に期待できる</li>\n<li>CommonJs の Tree Shaking 対応</li>\n<li>css の chunk が可能になった(<a href=\"https://webpack.js.org/plugins/mini-css-extract-plugin/\" target=\"_blank\" rel=\"nofollow\">MiniCssExtractPlugin</a>使用時にできる)</li>\n</ul>\n<p>ここでは特に大きな破壊的変更を 2 つほど紹介します。</p>\n<h4 id=\"nodejs-の-polyfill-を自動で挿入しなくなった\"><a href=\"#nodejs-%E3%81%AE-polyfill-%E3%82%92%E8%87%AA%E5%8B%95%E3%81%A7%E6%8C%BF%E5%85%A5%E3%81%97%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Node.js の polyfill を自動で挿入しなくなった</h4>\n<p>webpack を使用すれば、Node.js のコードをクライアントサイドで使用し、自動で polyfill を挿入してくれていました。</p>\n<p>今後 webpack は Web で動作するコードに焦点を当てていくため、Node.js の polyfill がバンドルに含まれ、結果的にバンドルサイズがデカくなくることを望まないようになったので、\n自動で polyfill を挿入しなくなります。</p>\n<p>polyfill を挿入したい場合は<a href=\"https://github.com/webpack/node-libs-browser\" target=\"_blank\" rel=\"nofollow\">webpack/node-libs-browser</a>を参照して、自前で挿入する必要があります。\nまた、クライアントサイドで Node.js に依存したパッケージを使用している場合は、パッケージの対応を待つか、フロントエンド互換のあるパッケージに変更する必要があります。</p>\n<p><code>global</code>,<code>__filename</code>,<code>__dirname</code>も webpack の設定でデフォルト<code>false</code>に変更されるので、使用したい場合は明示的に変更する必要があります。</p>\n<h4 id=\"デフォルトランタイムが一部-es2015-になった\"><a href=\"#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%83%A9%E3%83%B3%E3%82%BF%E3%82%A4%E3%83%A0%E3%81%8C%E4%B8%80%E9%83%A8-es2015-%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>デフォルトランタイムが一部 ES2015 になった</h4>\n<p>webpack が生成するコードが一部 ES2015 になったので、明示的に es5 への対応が必要になりました。\nbrowserslist のサポートが含まれたので、browserslist の設定 or webpack の設定を変える、２つの選択肢があります。</p>\n<ul>\n<li>webpack の設定</li>\n</ul>\n<p>webpack.config.js</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">module.exports = {\n  target: [&#x26;#39;web&#x26;#39;,&#x26;#39;es5&#x26;#39;]\n};</code></pre></div>\n<ul>\n<li>browserslist の設定</li>\n</ul>\n<p>.browserslistrc</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">last 1 version\nie &#x26;gt;= 11</code></pre></div>\n<p>package.json</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">  &#x26;quot;browserslist&#x26;quot;: [\n    &#x26;quot;last 1 version&#x26;quot;,\n    &#x26;quot;&#x26;gt; 1%&#x26;quot;,\n    &#x26;quot;ie &#x26;gt;= 11&#x26;quot;\n  ]</code></pre></div>\n<hr>\n<h3 id=\"（宣伝）-フロントエンドエキスパートチームで-webdb-press-vol119-の特集記事を執筆しました\"><a href=\"#%EF%BC%88%E5%AE%A3%E4%BC%9D%EF%BC%89-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E3%82%A8%E3%82%AD%E3%82%B9%E3%83%91%E3%83%BC%E3%83%88%E3%83%81%E3%83%BC%E3%83%A0%E3%81%A7-webdb-press-vol119-%E3%81%AE%E7%89%B9%E9%9B%86%E8%A8%98%E4%BA%8B%E3%82%92%E5%9F%B7%E7%AD%86%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://blog.cybozu.io/entry/2020/10/21/114857\" target=\"_blank\" rel=\"nofollow\">（宣伝） フロントエンドエキスパートチームで WEB+DB PRESS Vol.119 の特集記事を執筆しました</a></h3>\n<img src=\"http://image.gihyo.co.jp/assets/images/cover/2020/9784297116699.jpg\" width=\"300\" height=\"auto\" />\n<p><a href=\"https://gihyo.jp/magazine/wdpress/archive/2020/vol119\" target=\"_blank\" rel=\"nofollow\">WEB+DB PRESS Vol.119</a> にサイボウズのフロントエンドエキスパートチームのメンバーで「フロントエンド脱レガシー 長く愛されるプロダクトをさらに改善していくために」というタイトルで特集記事を寄稿しました。</p>\n"},"__N_SSG":true}