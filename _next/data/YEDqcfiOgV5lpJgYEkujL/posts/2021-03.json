{"pageProps":{"membersPhotoUrl":{"@koba04":"/assets/photo/f8079885d680213e64e4d706daa4a5ee_400x400.jpeg","@pirosikick":"/assets/photo/a95b52be00e06cd293a6853bc36490bc_400x400.jpeg","@__sakito__":"/assets/photo/erghEqaW_400x400.png","@shisama_":"/assets/photo/A9M8G6DH_400x400.jpg","@nakajmg":"/assets/photo/EKNVNzOg_400x400.jpg","@b4h0_c4t":"/assets/photo/QySbTwnO_400x400.jpg","@__sosukesuzuki":"/assets/photo/7iJNhdua_400x400.jpg","@narirow":"/assets/photo/1mSWaTJY_400x400.jpeg","@koh110":"/assets/photo/387943_158685184235470_100002819679575_201710_1252547332_n_400x400.jpg"},"frontmatter":{"title":"Cybozu Frontend Monthly","date":"2021-03-30T17:00:00+09:00","slug":"2021-03","connpass":"https://cybozu.connpass.com/event/208515/","streamUrl":"https://www.youtube.com/watch?v=AZy7IvmMRjE","no":9,"members":[{"name":"@koba04","link":"https://twitter.com/koba04"},{"name":"@pirosikick","link":"https://twitter.com/pirosikick"},{"name":"@__sakito__","link":"https://twitter.com/__sakito__"},{"name":"@shisama_","link":"https://twitter.com/shisama_"},{"name":"@nakajmg","link":"https://twitter.com/nakajmg"},{"name":"@b4h0_c4t","link":"https://twitter.com/b4h0_c4t"},{"name":"@__sosukesuzuki","link":"https://twitter.com/__sosukesuzuki"}],"guest":[{"name":"@narirow","link":"https://twitter.com/narirow"},{"name":"@koh110","link":"https://twitter.com/koh110"}]},"html":"<h3 id=\"compat2021-eliminating-five-top-compatibility-pain-points-on-the-web\"><a href=\"#compat2021-eliminating-five-top-compatibility-pain-points-on-the-web\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://web.dev/compat2021/\" target=\"_blank\" rel=\"nofollow\">Compat2021: Eliminating five top compatibility pain points on the web</a></h3>\n<ul>\n<li>共有者: sakito</li>\n</ul>\n<p>Compat2021という取り組みの紹介記事になります。\n同時に<a href=\"https://blogs.windows.com/msedgedev/2021/03/22/better-compatibility-compat2021/\" target=\"_blank\" rel=\"nofollow\">マイクロソフト</a>、<a href=\"https://www.igalia.com/2021/03/22/Igalia-and-Compat2021.html\" target=\"_blank\" rel=\"nofollow\">Igalia</a>からもCompat2021についての各社の取り組みについて記事が公開されています。</p>\n<p><a href=\"https://insights.developer.mozilla.org/reports/mdn-browser-compatibility-report-2020.html\" target=\"_blank\" rel=\"nofollow\">WebDNA</a>などを通して行われてきた調査で浮き彫りになった開発者が感じている問題について「ブラウザーの互換性」が多くあがっており、その問題について改善していくという内容になっています。\n特にCSS関連でCSS Flexbox, CSS Grid, CSS position: sticky, CSS aspect-ratio property, CSS transformsが各ブラウザで微妙に挙動が異なることによる辛さが多く挙げられているので、ここを2021年は改善していくとのことです。</p>\n<p>記事では具体的にどのような挙動の差があるのかもまとまっています。</p>\n<p><a href=\"https://groups.google.com/g/compat2021\" target=\"_blank\" rel=\"nofollow\">メーリングリスト</a>や<a href=\"https://wpt.fyi/compat2021?feature=summary\" target=\"_blank\" rel=\"nofollow\">web-platform-tests dashboard - Compat 2021 Dashboard</a>で情報を追いかけることができるのと、今後も継続的にこの問題について情報があがってくるようです。</p>\n<p>Chromium以外にもGeckoやWebKitも改善されないと意味がないような気がしますが、WebKitについてはIgaliaが取り組みについて触れているのでIgaliaがWebKitに協力していき、ほかのベンダーが共同でブラウザの改善に取り組むのかもしれません。</p>\n<p>CSSの微妙な違いについてはかなり直面するケースでもあり、確認も大変なので嬉しい取り組みだと思います。</p>\n<hr>\n<h3 id=\"テキストに隠し情報を埋め込むnpmモジュールを公開しました\"><a href=\"#%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AB%E9%9A%A0%E3%81%97%E6%83%85%E5%A0%B1%E3%82%92%E5%9F%8B%E3%82%81%E8%BE%BC%E3%82%80npm%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92%E5%85%AC%E9%96%8B%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://zenn.dev/redshoga/articles/ca28db8afd6b44\" target=\"_blank\" rel=\"nofollow\">テキストに隠し情報を埋め込むnpmモジュールを公開しました</a></h3>\n<ul>\n<li>共有者: nakajmg</li>\n</ul>\n<p>電子透かしを入れることなどを目的とした、表示されない文字を使ってテキストにデータを埋め込む話。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">テ​​​‌‌‌​​​‌‌‌‌‌​‌​‌​​‌​‌​​​​‌‌‌​​​‌‌‌‌‌​‌​‌​‌‌​‌‌キ​​​‌‌‌​​​‌‌‌‌‌​​​‌‌​​​‌‌​​​‌‌‌​​​‌‌‌‌‌​‌​‌​‌‌​​‌ス​​​‌‌‌​​​‌‌‌‌‌​‌​‌​​​‌​‌​​​‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​ト​​​‌‌‌​​​‌‌‌‌‌​​​‌​‌​​‌​​​​‌‌‌​​​‌‌‌‌‌​​​‌​​‌‌​​を​​​‌‌‌​​​‌‌‌‌‌​​​‌‌‌​‌‌‌​​​‌‌‌​​​‌‌‌‌‌​‌​‌​‌​‌‌‌コ​​​‌‌‌​​​‌‌‌‌‌​​​‌​​‌‌​​​​​‌‌‌​​​‌‌‌‌‌​​​‌‌‌​‌‌​ピ​​​‌‌‌​​​‌‌‌‌‌​​​‌‌​​​​‌​​​‌‌‌​​​‌‌‌‌‌​​​‌​​‌‌​​ー​​​‌‌‌​​​‌‌‌‌‌​‌​‌​​​‌‌​​​​‌‌‌​​​‌‌‌‌‌​​​‌​‌​‌​‌し​​​‌‌‌​​​‌‌‌‌‌​​​‌​​​​‌‌てね</code></pre></div>\n<p>👆のテキストをコピーして <a href=\"https://zero-width-watermark-web.vercel.app/\" target=\"_blank\" rel=\"nofollow\">https://zero-width-watermark-web.vercel.app/</a> で XTRACT MODEにしてコピペしてExtractを実行すると…。</p>\n<p>👐</p>\n<p>実装としてはテキストをUint8Arrayに変換して<code>0</code>と<code>1</code>をゼロ幅文字(<code>0x200c</code>と<code>0x200b</code>)に変換して埋め込んでいます。</p>\n<p>この手法は数年前に話題になったことがありました。</p>\n<p><a href=\"https://labs.cybozu.co.jp/blog/akky/2018/04/leaker-detection-by-zero-width-characters/\" target=\"_blank\" rel=\"nofollow\">ゼロ幅文字にエンコードした隠し情報で、文書をリークしたメンバーを特定</a></p>\n<hr>\n<h3 id=\"how-mdns-site-search-works---mozilla-hacks---the-web-developer-blog\"><a href=\"#how-mdns-site-search-works---mozilla-hacks---the-web-developer-blog\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://hacks.mozilla.org/2021/03/how-mdns-site-search-works/\" target=\"_blank\" rel=\"nofollow\">How MDN's site-search works - Mozilla Hacks - the Web developer blog</a></h3>\n<ul>\n<li>共有者: zaki___yama</li>\n</ul>\n<p>リニューアルしたMDNのサイト内検索のしくみの話。</p>\n<p>2021年2月時点で、MDNには</p>\n<ul>\n<li>英語のドキュメントが 11,619 ページ</li>\n<li>翻訳されたドキュメントが約 40,000 ページ</li>\n<li>英語だけで 530 万語</li>\n</ul>\n<p>存在するそうです。\nビルド時にこれらのデータを全文検索データベースに突っ込んでインデックスする、ということをやっています。\nデータベースとして現在採用しているのは Elasticsearch です。</p>\n<h4 id=\"サイト全体のアーキテクチャ\"><a href=\"#%E3%82%B5%E3%82%A4%E3%83%88%E5%85%A8%E4%BD%93%E3%81%AE%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>サイト全体のアーキテクチャ</h4>\n<p>以下の図がわかりやすい。</p>\n<p><img src=\"https://hacks.mozilla.org/files/2021/03/Untitled-Diagram-4.png\" alt=\"mdn-architecture\"></p>\n<p>サイトのコンテンツを Elasticsearch に突っ込む、という処理を GitHub Actions で定期実行しています。 (24h おき)\nまた、検索時はフロントエンドからの fetch() リクエストを一旦 Django で構築したバックエンドが受け取り、クエリのバリデーションや整形をした後 Elasticsearch に送っています。</p>\n<h4 id=\"インデックス化までの流れ\"><a href=\"#%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9%E5%8C%96%E3%81%BE%E3%81%A7%E3%81%AE%E6%B5%81%E3%82%8C\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>インデックス化までの流れ</h4>\n<ul>\n<li>ビルド時、コンテンツから index.html と一緒に index.json というデータを生成する。これは以下のようなデータ</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"doc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DOCUMENT TITLE\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"summary\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DOCUMENT SUMMARY\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prose\"</span><span class=\"token punctuation\">,</span> \n        <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"introduction\"</span><span class=\"token punctuation\">,</span> \n          <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"INTRODUCTION\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&#x3C;p>FIRST BLOCK OF TEXTS&#x3C;/p>\"</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     ...\n   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token property\">\"popularity\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0.12345</span><span class=\"token punctuation\">,</span>\n   ...\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>Python のスクリプトで、index.json のHTMLからタグを取り除いた純粋なコンテンツを得る\n<ul>\n<li>これは <code>&#x3C;p>Some &#x3C;em>cool&#x3C;/em> text.&#x3C;/p></code> -> <code>Some cool text.</code> のような単純な処理だけではなく、 <code>&#x3C;div class=\"hidden\"></code> や <code>&#x3C;div class=\"notecard warning\"></code> なども取り除く必要がある</li>\n</ul>\n</li>\n<li>Elasticsearch に送る</li>\n<li>...という処理を 24 時間おきに GitHub Actions で実行\n<ul>\n<li>production build 用の GitHub Action はおそらく <a href=\"https://github.com/mdn/yari/blob/main/.github/workflows/prod-build.yml\" target=\"_blank\" rel=\"nofollow\">prod-build.yml</a></li>\n</ul>\n</li>\n<li>削除されたページのインデックスなどを考慮し、Elasticsearch 側は毎回インデックスを全削除 -> 再作成している</li>\n</ul>\n<h4 id=\"検索\"><a href=\"#%E6%A4%9C%E7%B4%A2\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>検索</h4>\n<ul>\n<li>フロントエンドからは <code>fetch()</code> で <code>GET /api/v1/search?q=foo&#x26;locale=fr</code> のようなエンドポイントを叩く</li>\n<li>バックエンドでは Django のアプリがこのクエリをバリデーションし Elasticsearch 用のクエリに変換して検索\n<ul>\n<li>elasticsearch-dsl というライブラリを使っている</li>\n</ul>\n</li>\n<li>検索結果のソート：popularity という数値を定義し、popularity と matchness を組み合わせてソートしてる\n<ul>\n<li>popularity: Google Analytics の PV 数（定期的にダウンロードしてる）を 0 ~ 1 の値に正規化したもの</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"error-cause-in-javascript---dev-community\"><a href=\"#error-cause-in-javascript---dev-community\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://dev.to/hemanth/error-cause-in-javascript-425d\" target=\"_blank\" rel=\"nofollow\">Error Cause in JavaScript - DEV Community</a></h3>\n<ul>\n<li>共有者: pirosikick</li>\n</ul>\n<p>Errorのコンストラクタの第2引数に他のエラーを渡すことができるプロポーザルについて。知らぬ間にもうStage 3になっていた。\n下流で起きたエラーを上流に流していく過程で、エラーメッセージを連結したり、独自のエラーを作ったりせずに、\nこのような言語で公式の方法ができると色々と使いまわしがよさそう。\n（Golangではエラーをラップして返すのはおなじみで、結構便利。）</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cause <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'…'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'…'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> cause <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token property-access\">cause</span> <span class=\"token operator\">===</span> cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>同じようなことをやってくれる<a href=\"https://www.npmjs.com/package/verror\" target=\"_blank\" rel=\"nofollow\">verror</a>というのがあるが、\nたぶんUniversalじゃないし、そこまでメジャーでは無い気がする。\nこの提案をベースに、Golangの<code>errors.As</code>みたいなのを作ると便利そう。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// errがtype型のErrorをcauseに持っている場合に返す</span>\n<span class=\"token comment\">// 適当に書いたので間違いあるかも！</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">errorAs</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>\n  <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> InstanceType<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>err<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> InstanceType<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token keyword\">type</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    err <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span>cause<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> cause <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> cause <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token function\">errorAs</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> MyError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// eはMyErrorとして扱える</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<hr>\n<h3 id=\"post-spectre-web-development\"><a href=\"#post-spectre-web-development\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.w3.org/TR/2021/WD-post-spectre-webdev-20210316/\" target=\"_blank\" rel=\"nofollow\">Post-Spectre Web Development</a></h3>\n<ul>\n<li>共有者: shisama</li>\n</ul>\n<p>Spectre以降のWeb開発について脅威モデルと対策の実践例が解説されているドキュメントがW3CのWorking Draft(草案)として公開されました。元々GoogleのMike West氏が書いた文書でしたがW3C organizationに移りました。<br>\nSpectreのようなサイドチャネル攻撃はハードウェアの脆弱性に起因するものなので、Same-Origin Policyでは防ぐことができません。機密情報が攻撃者によって操作可能なプロセスの中にあった場合、サイドチャネル攻撃によって情報の推測がされることが実証されています。JavaScriptを使ったSpectreのPoCも公開されました。</p>\n<ul>\n<li><a href=\"https://security.googleblog.com/2021/03/a-spectre-proof-of-concept-for-spectre.html\" target=\"_blank\" rel=\"nofollow\">Google Online Security Blog: A Spectre proof-of-concept for a Spectre-proof web</a></li>\n</ul>\n<p>プロセスレベルでサイトを分離するChromiumの<a href=\"https://www.chromium.org/Home/chromium-security/site-isolation\" target=\"_blank\" rel=\"nofollow\">Site Isolation</a>やFirefoxの<a href=\"https://wiki.mozilla.org/Project_Fission\" target=\"_blank\" rel=\"nofollow\">Project Fission</a>があり、これらはデフォルトで有効となっているため、eTLD+1が異なるURLのサイトはプロセスが別となります。<br>\nただ、すべてのブラウザがこれを実装するのは難しいため、Opt-inで対策可能なHTTPヘッダーを用意しています。</p>\n<p>この文書ではそれらのHTTPヘッダーの設定方法が詳しく紹介されています。<br>\n『<a href=\"https://developers-jp.googleblog.com/2021/03/blog-post_29.html\" target=\"_blank\" rel=\"nofollow\">Google Developers Japan: サイドチャネル攻撃への対策</a>』でも紹介されている内容+補足は以下の通り。<br>\nこれはW3CのドキュメントのTL;DRにも書かれている内容です。</p>\n<ol>\n<li>受信したヘッダーを調べ、一方で Origin ヘッダー、もう一方で Sec-Fetch- で始まる各ヘッダーに注目し、<strong>リクエストに応答するべきかどうかを判断します</strong>。\n<ul>\n<li>(補足)<code>Sec-Fetch-*</code>からはじまるFetch Metadataはリクエスト時にChromeによって自動で付与されます。Fetch Metadataにはどこからきたどのようなリクエストかの情報が含まれています。</li>\n</ul>\n</li>\n<li><strong>攻撃者がリソースをサブリソースとして読み込む機能を制限します</strong>。これをするには、Cross-Origin Resource Policy として same-origin を設定します（必要な場合のみ、same-site または cross-origin にします）。\n<ul>\n<li>(補足)配信されるリソースに設定します。CDNなどで配信しているようなCross-Originで使われるリソースには値にcross-originを設定する必要があります。</li>\n</ul>\n</li>\n<li><strong>攻撃者がリソースをドキュメントとしてフレームに含めることができるかを制限します</strong>。これをするには、X-Frame-Options: SAMEORIGIN を使ってフレーム化保護にオプトインするか、さらに細かい制御が可能な CSP の frame-ancestors ディレクティブを使います。たとえば、<code>frame-ancestors 'self' https://trusted.embedder</code> とします。\n<ul>\n<li>(補足)iframeなどに埋め込めることができるページをSame-Originに制限したり、指定したOriginのみに制限できます。</li>\n</ul>\n</li>\n<li><strong>攻撃者がアプリケーションのウィンドウを参照する機能を制限します</strong>。これをするには、Cross-Origin Opener Policy を設定します。制限が強い same-origin 値をデフォルトとし、必要な場合のみ same-origin-allow-popups または unsafe-none にするのが最適です。\n<ul>\n<li>(補足) <code>Cross-Origin-Opener-Policy: same-origin</code>が設定されているページから新しいウィンドウで開かれたCross-Originなページからは<code>window.opener</code>の値がnullになります。</li>\n</ul>\n</li>\n<li><strong>MIME-type confusion 攻撃を防ぎ</strong>、Cross-Origin Read Blocking（クロスオリジン読み込みブロック）などの消極的防御の確実性を高めます。これをするには、正しい Content-Type ヘッダーを設定し、X-Content-Type-Options: nosniff となっていることをグローバルで確認します。\n<ul>\n<li>(補足)<code>&#x3C;img></code>や<code>&#x3C;script></code>を使って機密情報が含まれたHTMLやJSONを取得することを利用したサイドチャネル攻撃がある。たとえば<code>&#x3C;img src=\"https://example.com/secret.json\"></code>のようなリクエストを攻撃者のサイトから行われたとき、見た目上は画像のパースに失敗して表示されないだけだが、攻撃者のコードのあるプロセス内のメモリに展開される。メモリに展開されたデータはサイドチャネル攻撃により推測可能となる。CORBはこのようなメモリへの展開を防ぐことができる機能です。</li>\n</ul>\n</li>\n</ol>\n<p>W3Cのドキュメントにはこれらの内容について実際のHTTPヘッダーの設定例をケースごとに実例を交えて解説しています。</p>\n<p>また、『<a href=\"https://www.w3.org/TR/2021/WD-post-spectre-webdev-20210316/#documents-isolated\" target=\"_blank\" rel=\"nofollow\">2.2.1. Fully-Isolated Documents</a>』のNoteにも書かれていますが、Chrome 91からSharedArrayBufferを使うためにはCross-Origin Isolateな状態でないと利用できなくなります。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/enabling-shared-array-buffer/#cross-origin-isolation\" target=\"_blank\" rel=\"nofollow\">SharedArrayBuffer updates in Android Chrome 88 and Desktop Chrome 91 - Chrome Developers</a></li>\n</ul>\n<p>これらの機能を使うためには次のようにCross-Originなページからのアクセスを防ぐ設定が必要です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Cross-Origin-Embedder-Policy: require-corp\nCross-Origin-Opener-Policy: same-origin</code></pre></div>\n<p>Performance APIなどもSite IsolationやこれらのHTTPヘッダーの設定が必要です。サイドチャネル攻撃の可能性があるAPIはCross-Origin Isolatedでないと使えないようになるかもしれません。　　\nどのように設定すればいいか迷ったときはこのドキュメントを参考に設定すると良さそうです。</p>\n<hr>\n<h3 id=\"sharedarraybuffer\"><a href=\"#sharedarraybuffer\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>SharedArrayBuffer</h3>\n<ul>\n<li>共有者: koh110</li>\n</ul>\n<p>Chrome 91からSharedArrayBufferの利用するためにヘッダーを返さなければならなくなりました。</p>\n<p><a href=\"https://developer.chrome.com/blog/enabling-shared-array-buffer/\" target=\"_blank\" rel=\"nofollow\">https://developer.chrome.com/blog/enabling-shared-array-buffer/</a></p>\n<ul>\n<li>使っているつもりはなかったが検出された</li>\n<li>Next.jsが入れているっぽい\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/issues/21708\" target=\"_blank\" rel=\"nofollow\">https://github.com/vercel/next.js/issues/21708</a></li>\n<li>依存して検出されてしまっているが影響はない</li>\n</ul>\n</li>\n<li>Reactの依存だった\n<ul>\n<li>最終的にSharedArrayBufferへの依存が削除された</li>\n<li><a href=\"https://github.com/facebook/react/releases/tag/v17.0.2\" target=\"_blank\" rel=\"nofollow\">https://github.com/facebook/react/releases/tag/v17.0.2</a></li>\n<li><a href=\"https://github.com/facebook/react/pull/20840\" target=\"_blank\" rel=\"nofollow\">https://github.com/facebook/react/pull/20840</a></li>\n<li>セキュリティなどの重大なissueではないためv16へのバックポートはない</li>\n</ul>\n</li>\n</ul>\n<p>もとをたどるとScheduler(React内部パッケージ)のプロファイリング機能で使われている</p>\n<h4 id=\"scheduler\"><a href=\"#scheduler\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Scheduler</h4>\n<p>元々はreact-schedulerというパッケージ<br>\nreact-scheduler -> schedule -> scheduler<br>\n<a href=\"https://github.com/facebook/react/pull/13543\" target=\"_blank\" rel=\"nofollow\">https://github.com/facebook/react/pull/13543</a><br>\n<a href=\"https://github.com/facebook/react/pull/13683\" target=\"_blank\" rel=\"nofollow\">https://github.com/facebook/react/pull/13683</a><br>\n<a href=\"https://github.com/facebook/react/tree/master/packages/scheduler\" target=\"_blank\" rel=\"nofollow\">https://github.com/facebook/react/tree/master/packages/scheduler</a></p>\n<p>中身を読んでみるとイベントキューのようなもの<br>\n<a href=\"https://github.com/facebook/react/blob/master/packages/scheduler/src/forks/SchedulerDOM.js\" target=\"_blank\" rel=\"nofollow\">https://github.com/facebook/react/blob/master/packages/scheduler/src/forks/SchedulerDOM.js</a></p>\n<p>renameが繰り返されるうちに説明文が消えたっぽい。<br>\nrequestAnimationFrameやrequestIdleCallbackより細かい優先度をつけて実行するというモチベーション。<br>\n<a href=\"https://github.com/facebook/react/blob/8a1e3962ab189b99b1593d8431feabcb4a21211b/packages/react-scheduler/src/ReactScheduler.js#L12-L23\" target=\"_blank\" rel=\"nofollow\">https://github.com/facebook/react/blob/8a1e3962ab189b99b1593d8431feabcb4a21211b/packages/react-scheduler/src/ReactScheduler.js#L12-L23</a></p>\n<p>Node.js + 古いIE環境を判定するために <code>typeof setImmediate</code> をみてるのがちょっと面白い。\n<a href=\"https://github.com/facebook/react/blob/master/packages/scheduler/src/forks/SchedulerDOM.js#L555-L556\" target=\"_blank\" rel=\"nofollow\">https://github.com/facebook/react/blob/master/packages/scheduler/src/forks/SchedulerDOM.js#L555-L556</a></p>\n<h4 id=\"profiler\"><a href=\"#profiler\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Profiler</h4>\n<p><a href=\"https://reactjs.org/docs/profiler.html\" target=\"_blank\" rel=\"nofollow\">https://reactjs.org/docs/profiler.html</a>\n<a href=\"https://gist.github.com/bvaughn/8de925562903afd2e7a12554adcdda16\" target=\"_blank\" rel=\"nofollow\">https://gist.github.com/bvaughn/8de925562903afd2e7a12554adcdda16</a></p>\n<p>Schedulerのプロファイリングには2つのアプローチが採用されている<br>\n<a href=\"https://github.com/facebook/react/pull/16145\" target=\"_blank\" rel=\"nofollow\">https://github.com/facebook/react/pull/16145</a><br>\n<a href=\"https://github.com/facebook/react/pull/16542\" target=\"_blank\" rel=\"nofollow\">https://github.com/facebook/react/pull/16542</a></p>\n<ul>\n<li>sample base\n<ul>\n<li>workerからSchedulerの現在の状態を読み取る</li>\n<li>workerとSchedulerのデータを共有するためにSharedArrayBufferが使われている</li>\n</ul>\n</li>\n<li>event base\n<ul>\n<li>Workerが初期化される前にプロファイリングするためのもの</li>\n</ul>\n</li>\n</ul>\n<p>プロファイリングはdevelopmentビルドでしか有効にされていないため、SharedArrayBufferの問題はproduction環境では起きないはず。</p>\n<p>production環境でSharedArrayBufferの警告が出ている場合developmentビルドのままリリースしている可能性やProfilerをonにしている可能性があるので、アップデートできない環境やフレームワークで依存している場合は気にしてみるとよいかも。<br>\n<a href=\"https://gist.github.com/bvaughn/25e6233aeb1b4f0cdb8d8366e54a3977\" target=\"_blank\" rel=\"nofollow\">https://gist.github.com/bvaughn/25e6233aeb1b4f0cdb8d8366e54a3977</a></p>\n<hr>\n<h3 id=\"tc39-2020-march0309-0310\"><a href=\"#tc39-2020-march0309-0310\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>TC39 2020 March(<a href=\"https://github.com/tc39/notes/blob/master/meetings/2021-03/mar-9.md\" target=\"_blank\" rel=\"nofollow\">03/09</a>, <a href=\"https://github.com/tc39/notes/blob/master/meetings/2021-03/mar-10.md\" target=\"_blank\" rel=\"nofollow\">03/10</a>)</h3>\n<ul>\n<li>共有者: @__sosukesuzuki</li>\n</ul>\n<p>数が多いのでいくつか興味深いかつあんまりメジャーではなさそうなものをあえて紹介。</p>\n<h4 id=\"class-static-initialization-blocks\"><a href=\"#class-static-initialization-blocks\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Class Static Initialization Blocks</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">Class</span> <span class=\"token maybe-class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">foo</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>現在条件付きのStage-3。</p>\n<p>前回の論点は２つあった。</p>\n<p>一つはクラスごとに複数のStatic Blocksを許可するかどうかという点だった。結論としては、クラスは任意の数のStatic Blocksを含むことができるようになった。</p>\n<p>もう一つは、Static Blocks内での<code>new.target</code>挙動についてだった。結論としては、メソッドと同じようにundefinedを返す必要があるということになった。</p>\n<p>この提案の中ではStatic Blocksに対するデコレータの扱いはサポートしていない。最終的にデコレータによるサポートが必要なのであれば、それはデコレータの提案の一部もしくは別のものとして議論する。</p>\n<p>SpiderMonkeyやV8ではすでに実装が始まっている。</p>\n<h4 id=\"records-and-tuples-update\"><a href=\"#records-and-tuples-update\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Records and Tuples update</h4>\n<p>現在Stage-2。</p>\n<p>2019年10月のStage-1のときのスライドでの議論に戻るが、TuplesやRecordsのために書いたコードは配列やオブジェクトに対しても動作するべきである。最近になって、配列のメソッドとTuplesのメソッドを照らし合わせていたところ、配列を操作する<code>popped</code>, <code>pushed</code>, <code>reversed</code>, <code>shifted</code>, <code>spliced</code>, <code>unshifted</code>, <code>with</code> などのメソッドが配列には存在しないことがわかった。</p>\n<p>もしこれらのメソッドが<code>Array.prototype</code>に存在すれば、この例のように配列を無駄にコピーする必要がなくなる。</p>\n<div class=\"remark-highlight\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> const a2 = [...a1].reverse();</span>\n<span class=\"token line\"></span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const a2 = a1.reversed();</span>\n<span class=\"token line\"></span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> const a3 = [...a2].sort();</span>\n<span class=\"token line\"></span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const a3 = a2.sorted();</span></span>\n</code></pre></div>\n<p>Tuplesのみならず配列にとっても有用なものである可能性が高い。</p>\n<p>なので、これらのメソッドを<code>Array.prototype</code>や<code>Tuple.prototype</code>に追加するというのを Records &#x26; Tuples とは異なる新しいプロポーザルとして管理することが決まった。</p>\n<h4 id=\"async-do-update-towards-stage-2\"><a href=\"#async-do-update-towards-stage-2\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Async Do update towards stage 2</h4>\n<p>現在Stage-1。</p>\n<p>前回からの変更点が２つある。</p>\n<p>1つめは、<code>do</code>のブロックの中で<code>break</code>,<code>continue</code>,<code>return</code>が使えるようになる。アンケートの結果そのような挙動に賛成する人が多かったため仕様に修正が加えられた。</p>\n<p>２つ目は、<code>do</code>のブロックの最後の文として、<code>else</code>なしの<code>if</code>は認めないようになった。<code>if</code>の直前の値を返すべきか、<code>undefined</code>を返すべきか不明瞭だからである。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// x is 3? or undefined?</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">do</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">3</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>タイトルは<code>towards stage 2</code>だが、まだ固まっておらず今後設計を洗練させるという結論になった。</p>\n<h4 id=\"promiseanysettled\"><a href=\"#promiseanysettled\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Promise.anySettled</h4>\n<p>これは厳密にはプロポーザルではない。</p>\n<p><code>Promise.race</code>は統一性のために<code>Promise.anySettled</code>という名前であるべきではないかという議論。</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>description</th>\n<th>status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Promise.allSettled</code></td>\n<td>短絡しない</td>\n<td>ES2020</td>\n</tr>\n<tr>\n<td><code>Promise.all</code></td>\n<td>入力のどれかが失敗したら短絡する</td>\n<td>ES2015</td>\n</tr>\n<tr>\n<td><code>Promise.race</code></td>\n<td>入力のどれかが完了したら短絡する</td>\n<td>ES2015</td>\n</tr>\n<tr>\n<td><code>Promise.any</code></td>\n<td>入力のどれかが成功したら短絡する</td>\n<td>ES2021</td>\n</tr>\n</tbody>\n</table>\n<p>このような表にしてみるとわかりやすくなる。</p>\n<p>新しい<code>Promise.anySettled</code>を導入、既存の<code>Promise.race</code>をその別名にして、全く同一の関数オブジェクトを指すようにするという提案。</p>\n<p>結論としては、この提案はコンセンサスが得られなかった。</p>\n<p>議論であげられている懸念が３つあった。</p>\n<p>一つは、一度導入された関数の名前を変更するというのは互換性の観点からよくないということ。具体的にいえばAMPは<code>Promise.race</code>の名前に依存したAPIを提供しているらしい。</p>\n<p>もうひとつは、プログラムは書かれることよりも読まれることが多いことを考えると、名前の異なる挙動が全く同じ関数を導入するというのは読み手に対して不親切であるという点。書くのみなら<code>Promise.anySettled</code>のみを覚えておけば問題ないが、読む場合には両方の関数とその関係を把握しておく必要が出てしまう。</p>\n<p>最後の懸案は、単純に<code>race</code>と<code>anySettled</code>という２つの言葉の意味には違いがあるという点。ほとんどのPromiseに対する標準のオペレーションは\"success confluence\"(「計算の結果は、内部の処理の順番に影響されない」)という性質があり、入力のPromiseがすべて成功した場合には成功した順番に影響されない計算結果になるようになっている。<code>Promise.race</code>はこの性質に反する操作であり、それを強調するためにあえてこの名前が使われているらしい。</p>\n<hr>\n<h3 id=\"announcing-the-deno-company\"><a href=\"#announcing-the-deno-company\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://deno.com/blog/the-deno-company\" target=\"_blank\" rel=\"nofollow\">Announcing the Deno Company</a></h3>\n<ul>\n<li>共有者: b4h0_c4t</li>\n</ul>\n<p>Deno社が声明を発表していた。</p>\n<p>要約すると、</p>\n<ul>\n<li>Deno(以下、ランタイムを指す)はブラウザAPIに準拠したモダンなプログラミングシステムである</li>\n<li>490万ドルのseed capitalを得たことでフルタイムの開発スタッフを確保できたため、タイムリーに開発が進むようになる。</li>\n<li>Denoの展開は直接的なマネタイズが目的ではない</li>\n</ul>\n<p>「490万ドルの資金調達に成功した」あたりが話題性の高い内容なのかなという感じでした。</p>\n<hr>\n<h3 id=\"css-aspect-ratio-の各ブラウザ実装が揃いつつある\"><a href=\"#css-aspect-ratio-%E3%81%AE%E5%90%84%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E5%AE%9F%E8%A3%85%E3%81%8C%E6%8F%83%E3%81%84%E3%81%A4%E3%81%A4%E3%81%82%E3%82%8B\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>CSS <code>aspect-ratio</code> の各ブラウザ実装が揃いつつある</h3>\n<ul>\n<li>共有者: narirow</li>\n</ul>\n<p>CSSで比率を計算して要素のサイズを表現できる<a href=\"https://drafts.csswg.org/css-sizing-4/#aspect-ratio\" target=\"_blank\" rel=\"nofollow\">aspect-ratio</a>、今月多くのブラウザで実装が進みました。各ブラウザの動向をまとめると以下のようなステータスです。</p>\n<ul>\n<li>GoogleChrome: <a href=\"https://groups.google.com/a/chromium.org/g/blink-dev/c/TF41VMfLhMI\" target=\"_blank\" rel=\"nofollow\">88でリリース済み (2020年10月)</a>\n<ul>\n<li>Chrome90でaspect-ratioのCSSアニメーションに対応 (<a href=\"https://blog.chromium.org/2021/03/chrome-90-beta-av1-encoder-for-webrtc.html\" target=\"_blank\" rel=\"nofollow\">参考</a>)</li>\n</ul>\n</li>\n<li>Firefox: <a href=\"https://groups.google.com/g/mozilla.dev.platform/c/selXOOzcRkU/m/GKxYv-0kAAAJ\" target=\"_blank\" rel=\"nofollow\">88でリリース予定 (2021年4月)</a></li>\n<li>Safari: <a href=\"https://trac.webkit.org/changeset/269641/webkit/\" target=\"_blank\" rel=\"nofollow\">TechnologyPreview117から徐々に対応、テスト中</a></li>\n</ul>\n<p>aspect-ratioは、特に画像や映像のあとから読み込みされたときに発生するガタツキ(CLS)が以前より問題視されて、<a href=\"https://github.com/WICG/intrinsicsize-attribute\" target=\"_blank\" rel=\"nofollow\">intrinsicsize</a>などのプロパティを経て、数年間議論が進んでいました。\n先立って、<a href=\"https://developer.mozilla.org/en-US/docs/Web/Media/images/aspect_ratio_mapping#a_new_way_of_sizing_images_before_loading_completes\" target=\"_blank\" rel=\"nofollow\">ブラウザの内部ではaspect-ratioを使用したスタイルをあてて、ガタツキが発生しないように調整</a>が行われていたりします。</p>\n<p>上記にも上がっていますが、Googleは<a href=\"https://web.dev/compat2021/\" target=\"_blank\" rel=\"nofollow\">Compat2021</a>というプロジェクトを立ち上げ、Webの互換性の問題に取り組んでいます。<a href=\"https://web.dev/compat2021/#css-aspect-ratio-property\" target=\"_blank\" rel=\"nofollow\">aspect-ratioプロパティ</a>はその中でも優先度の高いものとして取り上げられています。</p>\n<p>プロダクションで使えるようになるのも、あと少しですね。</p>\n<hr>\n<h3 id=\"pwaでもスクリーンショットが登録できるように\"><a href=\"#pwa%E3%81%A7%E3%82%82%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%E3%81%8C%E7%99%BB%E9%8C%B2%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>PWAでもスクリーンショットが登録できるように</h3>\n<ul>\n<li>共有者: narirow</li>\n</ul>\n<p><a href=\"https://web.dev/add-manifest/#description\" target=\"_blank\" rel=\"nofollow\">manifest.json</a>がAndroidChromeで強化されます。\n<code>screenshots</code>と、<code>description</code>のフィールドを入力しておくと、アプリストアのような立地なインストール画面を立ち上げることができるようになります。</p>\n<p><img src=\"https://slack-imgs.com/?c=1&#x26;o1=ro&#x26;url=https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FExo2ZjSWEAMFTKr.jpg\" alt=\"リッチなインストール画面\"></p>\n<p>(ChromiumDevツイートから転載: <a href=\"https://twitter.com/ChromiumDev/status/1376472636058927104\" target=\"_blank\" rel=\"nofollow\">https://twitter.com/ChromiumDev/status/1376472636058927104</a>)</p>\n<hr>\n<h3 id=\"laytoutshiftを効率的にdebugする-webdev--chrome90でcls算出方法がアップデート\"><a href=\"#laytoutshift%E3%82%92%E5%8A%B9%E7%8E%87%E7%9A%84%E3%81%ABdebug%E3%81%99%E3%82%8B-webdev--chrome90%E3%81%A7cls%E7%AE%97%E5%87%BA%E6%96%B9%E6%B3%95%E3%81%8C%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://web.dev/debugging-layout-shifts/\" target=\"_blank\" rel=\"nofollow\">LaytoutShiftを効率的にdebugする (web.dev)</a> + Chrome90でCLS算出方法がアップデート</h3>\n<ul>\n<li>共有者: narirow</li>\n</ul>\n<p>web.devでCoreWebVitalsの一つである、レイアウトシフトのデバッグ方法について詳細に記載れています。\nレイアウトシフトに換算される要素は <strong>直近でユーザーの入力に基づいて変更されていない要素</strong>で、これは PerformanceObserverで検出されるデータのうち、<code>hadRecentInput</code>がfalseになっている要素が該当します。</p>\n<p>以下のようなスクリプトをChromeのデバッグツールのsnippetを追加したり、bookmarkletとして用意しておくとConsole画面で便利にデバッグ出来ます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entryList</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> entry <span class=\"token keyword\">of</span> entryList<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>entry<span class=\"token punctuation\">.</span><span class=\"token property-access\">hadRecentInput</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cls <span class=\"token operator\">+=</span> entry<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current CLS value:'</span><span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'layout-shift'</span><span class=\"token punctuation\">,</span> buffered<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>(web.devより転載)</p>\n<p>CLSの検出方法は、実は日々アップデートされています。この更新は<a href=\"https://chromium.googlesource.com/chromium/src/+/master/docs/speed/metrics_changelog/cls.md\" target=\"_blank\" rel=\"nofollow\">ChromeSpeed</a>のページから見ることが出来ます。Chrome89から、<code>opacity:0</code>が当てられているような<a href=\"https://chromium.googlesource.com/chromium/src/+/master/docs/speed/metrics_changelog/2020_12_cls.md\" target=\"_blank\" rel=\"nofollow\">目に見えない要素がCLSから換算されなく</a>なり、Chrome90でもこの方向性が強化され、<a href=\"https://chromium.googlesource.com/chromium/src/+/master/docs/speed/metrics_changelog/2021_02_cls.md\" target=\"_blank\" rel=\"nofollow\">空白のテキストやtransformなどの不具合も修正</a>されます。</p>\n<p>CoreWebVitalsの対応を行っている方は、Chrome90がリリースされた後、変化が起きないかSearchConsoleから確認してみると良いでしょう。</p>\n"},"__N_SSG":true}