{"pageProps":{"membersPhotoUrl":{"@koba04":"/assets/photo/f8079885d680213e64e4d706daa4a5ee_400x400.jpeg","@pirosikick":"/assets/photo/a95b52be00e06cd293a6853bc36490bc_400x400.jpeg","@toshi__toma":"/assets/photo/fGX7e5wk_400x400.jpg","@zaki___yama":"/assets/photo/Q_ihmvTQ_400x400.png","@__sakito__":"/assets/photo/erghEqaW_400x400.png","@shisama_":"/assets/photo/A9M8G6DH_400x400.jpg","@nakajmg":"/assets/photo/EKNVNzOg_400x400.jpg","@b4h0_c4t":"/assets/photo/QySbTwnO_400x400.jpg"},"frontmatter":{"title":"Cybozu Frontend Monthly","date":"2020-07-28T19:00:00+09:00","slug":"2020-07","connpass":"https://cybozu.connpass.com/event/180861/","streamUrl":null,"hashTag":"#サイボウズフロントエンドマンスリー","no":1,"members":[{"name":"@koba04","link":"https://twitter.com/koba04"},{"name":"@pirosikick","link":"https://twitter.com/pirosikick"},{"name":"@toshi__toma","link":"https://twitter.com/toshi__toma"},{"name":"@zaki___yama","link":"https://twitter.com/zaki___yama"},{"name":"@__sakito__","link":"https://twitter.com/__sakito__"},{"name":"@shisama_","link":"https://twitter.com/shisama_"},{"name":"@nakajmg","link":"https://twitter.com/nakajmg"},{"name":"@b4h0_c4t","link":"https://twitter.com/b4h0_c4t"}],"guest":null},"html":"<h3 id=\"css-painting-order\"><a href=\"#css-painting-order\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://abandonedwig.info/blog/2020/07/03/css-painting-order.html\" target=\"_blank\" rel=\"nofollow\">CSS Painting Order</a></h3>\n<ul>\n<li>共有者: b4h0_c4t</li>\n</ul>\n<p>DOM の描画順がどのように決定されるのかについて解説\n記述順・z-index・Stacking Context が作用することについて言及した後、<code>Overflow: scroll;</code>スタイルを持った DOM が Stacking Context を形成しないことについて恣意的だと話している。\nまた、preserve-3d と transform を使用して Stacking Context の描画順を破壊する方法についても触れている。(FireFox では再現しない)</p>\n<hr>\n<h3 id=\"storage-for-the-web\"><a href=\"#storage-for-the-web\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://web.dev/storage-for-the-web/\" target=\"_blank\" rel=\"nofollow\">Storage for the web</a></h3>\n<ul>\n<li>共有者： nakajmg</li>\n</ul>\n<p>ブラウザのストレージの話。各ブラウザの保存容量制限値、制限値を超える場合の挙動やエラーハンドリングとデバッグについての解説。LocalStorage や Cookie ではなく IndexedDB や Cache Storage を使いましょうとのこと。<a href=\"https://web.dev/live/\" target=\"_blank\" rel=\"nofollow\">web.dev/live</a>でこの記事を元にしたプレゼンがありました。</p>\n<p>StorageManager を使うと使用率などが調べられる。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> estimate <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token dom variable\">navigator</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">storage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">estimate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用率</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>estimate<span class=\"token punctuation\">.</span><span class=\"token property-access\">usage</span> <span class=\"token operator\">/</span> estimate<span class=\"token punctuation\">.</span><span class=\"token property-access\">quota</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// あどどれくらい使えるか</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>estimate<span class=\"token punctuation\">.</span><span class=\"token property-access\">quota</span> <span class=\"token operator\">-</span> estimate<span class=\"token punctuation\">.</span><span class=\"token property-access\">usage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>参考</p>\n<ul>\n<li><a href=\"https://youtu.be/NNuTV-gjlZQ\" target=\"_blank\" rel=\"nofollow\">web.dev/live - Storage for the web</a></li>\n<li><a href=\"https://web.dev/persistent-storage/\" target=\"_blank\" rel=\"nofollow\">データの永続化</a></li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/API/StorageManager\" target=\"_blank\" rel=\"nofollow\">StorageManager - Web API | MDN</a></li>\n<li><a href=\"https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/\" target=\"_blank\" rel=\"nofollow\">Full Third-Party Cookie Blocking and More</a></li>\n</ul>\n<hr>\n<h3 id=\"react-spectrum\"><a href=\"#react-spectrum\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://github.com/adobe/react-spectrum\" target=\"_blank\" rel=\"nofollow\">React Spectrum</a></h3>\n<ul>\n<li>共有者: pirosikick</li>\n</ul>\n<p>Adobe 製のデザインシステム、React Spectrum がいい感じなので紹介。\n日本語の記事は以下がざっくり概要が書いておりわかりやすいです。</p>\n<p><a href=\"https://qiita.com/so99ynoodles/items/bc924b7ee8c265b09723\" target=\"_blank\" rel=\"nofollow\">Adobe 製デザインシステム「React Spectrum」がすごいので紹介したい - Qiita</a></p>\n<p>開発者が React Europe2020 で解説していた動画が以下。React Spectrum が何を考えて開発されたか話されています。\nモバイルのスクリーンリーダー対応に苦労した話など、個人的には React Europe2020 のトークの中で一番おもしろかったです（全部観たわけじゃないないけど！）</p>\n<p><a href=\"https://www.youtube.com/watch?v=dxDcBB7Xoxs\" target=\"_blank\" rel=\"nofollow\">Design system and accessibility - Devon Govett aka @devongovett at @ReactEurope 2020</a></p>\n<p>a11y の実装が別パッケージになっており見た目の実装と分離されているのが特徴で、a11y 部分の react-aria が便利そうです。</p>\n<p><a href=\"https://react-spectrum.adobe.com/react-aria/useDialog.html\" target=\"_blank\" rel=\"nofollow\">モーダルの実装のサンプルコード</a></p>\n<p>モーダルの実装のサンプルコードを見てみましたが、以下のようなパーツで構成されています。</p>\n<ul>\n<li>FocusScope: focus の管理。子要素に focus し、unmount 後に focus を元の状態に戻す</li>\n<li>usePreventScroll: スクロールの防止</li>\n<li>useModal: モーダルの裏側にあるコンテンツをスクリーンリーダーから隠す</li>\n<li>useOverlay: モーダルを閉じる動作の制御（ESC キー、モーダル外のクリック）</li>\n<li>DismissButto: 視覚的に表示されないがスクリーンリーダーから見える閉じるボタン\n<ul>\n<li>内部で VisuallyHidden コンポーネントが使われている</li>\n</ul>\n</li>\n<li>etc</li>\n</ul>\n<p>パーツが多く個々の意味を理解しないと使いこなすのがやや難しそうですが、focus の管理などは自前で実装すると大変なのでありがたい！</p>\n<hr>\n<h3 id=\"redux-essentials-part-1-redux-overview-and-concepts\"><a href=\"#redux-essentials-part-1-redux-overview-and-concepts\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://redux.js.org/tutorials/essentials/part-1-overview-concepts\" target=\"_blank\" rel=\"nofollow\">Redux Essentials, Part 1: Redux Overview and Concepts</a></h3>\n<ul>\n<li>共有者: sakito</li>\n</ul>\n<p>Redux についての入門ページが追加された。\n追加された理由についての Issue。\n<a href=\"https://github.com/reduxjs/redux/issues/3674\" target=\"_blank\" rel=\"nofollow\">https://github.com/reduxjs/redux/issues/3674</a></p>\n<p>Redux について何も知識がなくても、Redux について理解ができるように、既存のチュートリアルよりも前の段階で行うチュートリアル。</p>\n<p>ちなみに Redux は現在ドキュメントページ全体の改善に取り組んでおり、今回のドキュメントの更新はその作業の１つになります。\n<a href=\"https://github.com/reduxjs/redux/issues/3592\" target=\"_blank\" rel=\"nofollow\">https://github.com/reduxjs/redux/issues/3592</a></p>\n<p>以下はちょっとした説明。</p>\n<ul>\n<li>\n<p>Part1\nRedux の用語、周辺ライブラリ、Redux のデータフローなど Redux について必要な知識の説明。</p>\n</li>\n<li>\n<p>Part2\nRedux Toolkit、Redux hooks を使用し、Redux devtool、Immer、Redux-thunk を説明しつつカウンターアプリを作成する。</p>\n</li>\n<li>\n<p>Part3\nPart2 で使用した基本的な知識の応用として、フィードアプリを作成する。</p>\n</li>\n<li>\n<p>Part4\nPart3 の続き。Redux のデータのやりとりを学ぶような実装を加える。</p>\n</li>\n<li>\n<p>Part5\nPart4 の続き。Redux Toolkit の createAsyncThunk を使用して非同期処理を加える</p>\n</li>\n<li>\n<p>Part6\nPart5 の続き。React DevTools Profiler と createSelector を使用し、レンダリングの改善を行う。\nRedux Toolkit の createEntityAdapter を使用し、データの最適化を行う。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"streaming-requests-with-the-fetch-api\"><a href=\"#streaming-requests-with-the-fetch-api\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://web.dev/fetch-upload-streaming/\" target=\"_blank\" rel=\"nofollow\">Streaming requests with the fetch API</a></h3>\n<ul>\n<li>共有者: shisama_</li>\n</ul>\n<p>Chrome 85 から Origin Trial が開始した<code>fetch()</code>の Upload Streaming Requests の解説記事。\nfetch API のリクエストボディに Stream を渡すことができるようになる。\n一度のリクエストで chunk でデータを送ることができるようになって Stream が閉じられるまではレスポンスは返ってこない。\n例えば、映像や音声など大きなデータを送りたいときに一気に送らずに少しずつ送ることができたり、リアルタイムなチャットを作ったり、\nこれまで WebSocket でできたことが、HTTP でできるようになる。</p>\n<ul>\n<li><a href=\"https://shisama.hatenablog.com/entry/2020/07/28/090000\" target=\"_blank\" rel=\"nofollow\">fetch() upload streaming は WebSocket の代替になるのか。Fetch を使ってカメラから取得した映像をストリーミングで送信する - 別にしんどくないブログ</a></li>\n</ul>\n<hr>\n<h3 id=\"svelte-3-typescript\"><a href=\"#svelte-3-typescript\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://svelte.dev/blog/svelte-and-typescript\" target=\"_blank\" rel=\"nofollow\">Svelte &#x3C;3 TypeScript</a></h3>\n<ul>\n<li>共有者： @toshi__toma</li>\n</ul>\n<p><a href=\"https://github.com/sveltejs/svelte\" target=\"_blank\" rel=\"nofollow\">Svelte</a>が TypeScript を公式にサポート。\nSvelte での TS サポートについてや、新規プロジェクトや既存のプロジェクトのセットアップ方法など。</p>\n<p><code>svelte-ts-sample.svelte</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-svelte\"><code class=\"language-svelte\">&#x26;lt;script lang=&#x26;quot;ts&#x26;quot;&#x26;gt;\n\tlet count: number = 0;\n\tconst increment = () =&#x26;gt; {\n\t\tcount += 1;\n\t}\n&#x26;lt;/script&#x26;gt;\n\n&#x26;lt;style&#x26;gt;\n\th1 {\n\t\tcolor: purple;\n\t\tfont-family: &#x26;#39;Comic Sans MS&#x26;#39;, cursive;\n\t\tfont-size: 2em;\n\t}\n&#x26;lt;/style&#x26;gt;\n\n&#x26;lt;h1&#x26;gt;Count: {count}!&#x26;lt;/h1&#x26;gt;\n&#x26;lt;button on:click={increment}&#x26;gt; + &#x26;lt;/button&#x26;gt;</code></pre></div>\n<p>新規でプロジェクトを作る際は、公式のテンプレートに setup スクリプトが用意されている。</p>\n<p>これまでも、有志が開発したツールとして <code>svelte-preprocess</code>や<code>VSCode Extension</code>があったので、TypeScript で開発は可能だった。\n今回、それらのツール郡が公式の Org 配下に入って、公式に TypeScript をサポートした。</p>\n<ul>\n<li><a href=\"https://github.com/sveltejs/svelte-preprocess\" target=\"_blank\" rel=\"nofollow\">svelte-preprocess</a>\n<ul>\n<li>Svelte のプリプロセッサ</li>\n<li>TypeScript 以外にも SCSS, CoffeeScript などもサポートしてる</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/sveltejs/language-tools/tree/master/packages/language-server\" target=\"_blank\" rel=\"nofollow\">svelte-language-server</a>\n<ul>\n<li>Svelte の LSP</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/sveltejs/language-tools/tree/master/packages/svelte-vscode\" target=\"_blank\" rel=\"nofollow\">svelte-vscode</a>\n<ul>\n<li>VSCode 拡張(Svelte for VS Code)</li>\n<li>補完や型エラーの表示など快適に開発できる</li>\n<li>テンプレート部分でも補完や型チェックなどが効くよ</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/sveltejs/language-tools/tree/master/packages/svelte-check\" target=\"_blank\" rel=\"nofollow\">svelte-check</a>\n<ul>\n<li>CLI のチェックツール</li>\n<li>利用されてない CSS や a11y、TS の型チェック</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/sveltejs/language-tools/tree/master/packages/svelte2tsx\" target=\"_blank\" rel=\"nofollow\">svelte2tsx</a>\n<ul>\n<li>Svelte コンポーネントを TSX に変換する</li>\n<li>テンプレートの attribute やコンポーネントの props の型チェック(svelte-jsx.d.ts, svelte-shims.d.ts)を実現するために使ってるっぽい</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/tsconfig/bases/blob/master/bases/svelte.json\" target=\"_blank\" rel=\"nofollow\">@tsconfig/svelte</a>\n<ul>\n<li>Svelte プロジェクト用の tsconfig</li>\n</ul>\n</li>\n</ul>\n<p>手元のプロジェクトで試した感じ簡単にセットアップできるし、快適に開発できそう。パフォーマンスと DX が両立されてる感じ。</p>\n<hr>\n<h3 id=\"building-better-in-the-world-of-build-tools\"><a href=\"#building-better-in-the-world-of-build-tools\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://youtu.be/vsMJiNtQWvw\" target=\"_blank\" rel=\"nofollow\">Building better in the world of build tools!</a></h3>\n<ul>\n<li>共有者: zaki___yama</li>\n</ul>\n<p>web.dev LIVE のセッション。\nwebpack, Parcel, Rollup などのビルドツールの特徴や長所・短所の話。</p>\n<p>印象に残ったエピソードとしては 7:00 あたりの</p>\n<ul>\n<li>Q. Parcel はメインスレッド用と Worker 用のバンドルに重複したモジュールがあるとき、うまく解釈して共通のチャンクに切り出してるみたいだけど、なんか理由あるの？</li>\n<li><a href=\"https://squoosh.app/\" target=\"_blank\" rel=\"nofollow\">Squoosh.app</a> という Web アプリを作ってたとき、webpack だと Worker と Main 用のバンドルに重複したコードが存在することがわかった\n<ul>\n<li>本当は共通の chunk に切り出してほしい</li>\n</ul>\n</li>\n<li>webpack に長文の issue を立てて、どう変更してほしいか説明した\n<ul>\n<li>おそらくこれ: <a href=\"https://github.com/webpack/webpack/issues/6472\" target=\"_blank\" rel=\"nofollow\">The case for Workers · Issue #6472 · webpack/webpack</a></li>\n</ul>\n</li>\n<li>webpack 側は解決してないけど、issue 立てた直後、Parcel のメンテナーが「これ Parcel だとうまくできるかも」と言って issue を立ててた</li>\n<li>数ヶ月後に close されてて、Parcel ではサポートされている</li>\n</ul>\n<p>という話。</p>\n<p>また、最後に紹介されていた <a href=\"https://bundlers.tooling.report/\" target=\"_blank\" rel=\"nofollow\">Tooling.Report</a> というサイトが便利そう。\nwebpack や Rollup などのビルドツールの機能差異がまとまっている。\n各機能(tree shaking とか)をサポートしてるかどうかテストが書かれてて、それらをリファレンス実装として参考にすることもできる</p>\n<hr>\n<h3 id=\"htmhell-special-close-buttons\"><a href=\"#htmhell-special-close-buttons\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.htmhell.dev/20-close-buttons/\" target=\"_blank\" rel=\"nofollow\">HTMHell special: close buttons</a></h3>\n<ul>\n<li>共有者: b4h0_c4t</li>\n</ul>\n<p>a11y から見た、「閉じるボタン」の実装でやりがちなバッドプラクティス 11 選。</p>\n<ol>\n<li>div and background image</li>\n<li>div and icon</li>\n<li>Font Awesome icons</li>\n<li>A close link</li>\n<li>A close link with text</li>\n<li>A close link without the href attribute</li>\n<li>Placeholder link and img</li>\n<li>Radio button</li>\n<li>Button with icon</li>\n<li>Button with svg</li>\n<li>The good ol' X</li>\n</ol>\n<p>要約すると</p>\n<ul>\n<li><code>&#x3C;button></code>を使う\n<ul>\n<li><code>&#x3C;div></code>はボタンではない</li>\n<li><code>&#x3C;a></code>は button ではない</li>\n<li><code>&#x3C;input type=\"radio\"></code>はボタンではない</li>\n</ul>\n</li>\n<li>適切なコンテンツを埋め込む\n<ul>\n<li>FontAwesome のアイコンは読み上げられない</li>\n<li><code>×</code>や<code>x</code>は閉じるという意味ではない</li>\n<li>svg は代替テキストを持たない</li>\n</ul>\n</li>\n<li>FontAwesome や'x'をどうしても使いたい場合\n<ul>\n<li>x や FontAwesome に<code>aria-hidden=true</code>を付ける</li>\n<li>代替文字列を入れる\n<ul>\n<li>文字を併記する場合: <code>&#x3C;span></code>で読み上げテキストを表現</li>\n<li>文字を見せたくない場合: <code>&#x3C;button></code>に<code>aria-label</code>を追加</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"名言\"><a href=\"#%E5%90%8D%E8%A8%80\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>名言</h4>\n<p><em>Using \"x\" for your close buttons is like using salt in your coffee cause it looks the same as sugar.</em></p>\n<hr>\n<h3 id=\"vue-3-is-now-in-rc\"><a href=\"#vue-3-is-now-in-rc\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://github.com/vuejs/rfcs/issues/189\" target=\"_blank\" rel=\"nofollow\">Vue 3 is now in RC!</a></h3>\n<ul>\n<li>共有者： nakajmg</li>\n</ul>\n<p>Vue3 が RC になりました。8 月中旬くらいにリリース予定！\nVue は公式のツール郡が魅力の 1 つですが、それらツールの Vue3 対応が必要で正式リリースまで時間がかかっているとのこと。</p>\n<p>IE11compatbuild とか migration のガイドが準備中で、Vue2 から Vue3 にアップグレードするのはこれが出てからにするとよさそう。<a href=\"https://github.com/vuejs/rfcs/issues/183\" target=\"_blank\" rel=\"nofollow\">Vue 3: Mid 2020 Status Update</a> にある Decision Tree を見ればどのタイミングで Vue3 を使い始めるのがいいかの判断材料に。</p>\n<h4 id=\"sfc-improvements\"><a href=\"#sfc-improvements\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://github.com/vuejs/rfcs/pull/182\" target=\"_blank\" rel=\"nofollow\">SFC Improvements</a></h4>\n<p>experimental な機能として次の機能が rc 版に入りました。</p>\n<ul>\n<li><code>&#x3C;script setup></code></li>\n<li><code>&#x3C;Suspence></code></li>\n<li><code>&#x3C;style vars></code></li>\n</ul>\n<p>うーん！</p>\n<hr>\n<h3 id=\"javascript-の生みの親ブレンダン・アイクが-javascript-の呼び方について言及した話\"><a href=\"#javascript-%E3%81%AE%E7%94%9F%E3%81%BF%E3%81%AE%E8%A6%AA%E3%83%96%E3%83%AC%E3%83%B3%E3%83%80%E3%83%B3%E3%83%BB%E3%82%A2%E3%82%A4%E3%82%AF%E3%81%8C-javascript-%E3%81%AE%E5%91%BC%E3%81%B3%E6%96%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%A8%80%E5%8F%8A%E3%81%97%E3%81%9F%E8%A9%B1\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://twitter.com/BrendanEich/status/1278803332287483904\" target=\"_blank\" rel=\"nofollow\">JavaScript の生みの親ブレンダン・アイクが JavaScript の呼び方について言及した話</a></h3>\n<ul>\n<li>共有者： @pirosikick</li>\n</ul>\n<p>小ネタ。JavaScript の生みの親ブレンダン・アイクは、「Java」と混同しない、かつ、より短い呼び方の「JS」がよいと思っている。</p>\n<ul>\n<li><a href=\"https://twitter.com/runhappylife/status/1278360272231641088\" target=\"_blank\" rel=\"nofollow\">ことの発端の Tweet</a>\n<ul>\n<li>「もし JavaScript を rename する機会があったら、何にする？」</li>\n<li>途中でブレンダン・アイクにメンションが飛ぶ（\"You Don't Know JS\"の人）</li>\n<li>ブレンダン・アイク登場</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"grunt-120-released\"><a href=\"#grunt-120-released\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://gruntjs.com/blog/2020-07-03-grunt-1.2.0-released\" target=\"_blank\" rel=\"nofollow\">Grunt 1.2.0 released</a></h3>\n<ul>\n<li>共有者: sakito</li>\n</ul>\n<p>Grunt 一時期止まっていたけど、2020 年 3 月あたりから生き返ってたんですね。</p>\n<hr>\n<h3 id=\"node-v1460-current--nodejs\"><a href=\"#node-v1460-current--nodejs\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://nodejs.org/en/blog/release/v14.6.0/\" target=\"_blank\" rel=\"nofollow\">Node v14.6.0 (Current) | Node.js</a></h3>\n<ul>\n<li>共有者： @shisama_</li>\n</ul>\n<p>今月の Node.js のアップデート情報です。\npackage.json に \"imports\" フィールドが追加されました。これはモジュールに対して alias を貼ることができる機能です。\nまた、\"exports\" フィールドのように実行環境ごとに読み込むファイルを変えることもできます。\n以下の例だと <code>#dep</code> という alias に対して Node.js だと \"node_modules/dep-node-native\" を読み込み、それ以外は \"./local-polyfill.js\" を読み込みます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"imports\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"#dep\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dep-node-native\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"default\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./local-polyfill.js\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<hr>\n<h3 id=\"how-to-delete-all-node_modules-directories-from-your-computer\"><a href=\"#how-to-delete-all-node_modules-directories-from-your-computer\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://gomakethings.com/how-to-delete-all-node_modules-directories-from-your-computer/\" target=\"_blank\" rel=\"nofollow\">How to delete all node_modules directories from your computer</a></h3>\n<ul>\n<li>共有者： @toshi__toma</li>\n</ul>\n<p>小ネタ。PC ローカルの<code>node_modules</code>を全部消す方法！！</p>\n<p>確かに、PC に大量の<code>node_modules</code>あるなぁと思った。\nPC のどっかに同じパッケージを既にインストールしてるなら、そっち参照してくれたらエコだなーとか雑に思う。\nghq でリポジトリ管理してるひとは、ディレクトリ指定して、簡単に自分の PC の node_modules のサイズ確認/削除できる。</p>\n<p>予想以上に結構多かったｗ</p>\n<hr>\n<h3 id=\"rust-for-javascript-developers---tooling-ecosystem-overview\"><a href=\"#rust-for-javascript-developers---tooling-ecosystem-overview\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"http://www.sheshbabu.com/posts/rust-for-javascript-developers-tooling-ecosystem-overview/\" target=\"_blank\" rel=\"nofollow\">Rust for JavaScript Developers - Tooling Ecosystem Overview</a></h3>\n<ul>\n<li>共有者: zaki___yama</li>\n</ul>\n<p>JS 開発者向けの Rust の話。\n個人ブログにシリーズものとして連載してて、今 4 回め。\nリンクしたのは第 1 回目のツールの対比、Rust 勉強し始めたときに知りたかった。\n2 回目以降はデータ型や関数などが JS と Rust でどう違うかなどの話っぽい。</p>\n<hr>\n<h3 id=\"creating-a-design-system-in-react\"><a href=\"#creating-a-design-system-in-react\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://medium.com/javascript-in-plain-english/creating-a-design-system-in-react-5c4d811d0ccc\" target=\"_blank\" rel=\"nofollow\">Creating a Design System in React</a></h3>\n<ul>\n<li>共有者： @pirosikick</li>\n</ul>\n<p>Bit というデザインシステムを構築・配布するようにサービスを使って、デザインシステムを構築する話。\n<a href=\"https://bit.dev/\" target=\"_blank\" rel=\"nofollow\">https://bit.dev/</a></p>\n<p>デザインシステムで各コンポーネントを個別で開発・publish・利用・更新するのを楽にしてくれる CLI ツール（bit-bin)と、\nbit.dev 上でドキュメントの公開や動作検証ができるようです。\n自分で monorepo を構築して管理するのは結構大変ですが、</p>\n<ul>\n<li>bit add src/components/*</li>\n<li>bit export 名前\nでコンポーネント毎に publish できるのはさくっとできてよさそう。（記事中の Gif がわかりやすい）\nBit に依存しすぎると後々辛くなりそうですが、個人&#x26;public であれば無料で使えるみたいなのでちょっと使ってみるにはよさそうでした。</li>\n</ul>\n<p>余談：↑ の Medium、JavaScript in plain english というブログで、シンプルな英語で読みやすい記事が多そうでした。</p>\n<hr>\n<h3 id=\"今月の-jserinfo\"><a href=\"#%E4%BB%8A%E6%9C%88%E3%81%AE-jserinfo\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>今月の JSer.info</h3>\n<p>毎週のフロントエンドウィークリーでは、各メンバーからの共有以外にも<a href=\"https://jser.info/\" target=\"_blank\" rel=\"nofollow\">Jser.info</a>を確認しています。いつもお世話になっています 🙌</p>\n<ul>\n<li><a href=\"https://jser.info/2020/07/06/firefox-78-vue-3-status/\" target=\"_blank\" rel=\"nofollow\">2020-07-06 の JS: Firefox 78、Vue 3 Status とリリーススケジュール</a></li>\n<li><a href=\"https://jser.info/2020/07/14/fastify-3.0.0-the-future-of-hapi-malina.js-solid.js/\" target=\"_blank\" rel=\"nofollow\">2020-07-14 の JS: fastify 3.0.0、The future of hapi、Malina.js、Solid.js</a></li>\n<li><a href=\"https://jser.info/2020/07/21/chrome-84samesite-cookie-vue-3-rc-react-spectrum/\" target=\"_blank\" rel=\"nofollow\">2020-07-21 の JS: Chrome 84(SameSite Cookie)、Vue 3 RC、React Spectrum</a></li>\n<li><a href=\"https://jser.info/2020/07/28/sveltetypescript-chrome-85-beta-web-speed-hackathon-online/\" target=\"_blank\" rel=\"nofollow\">2020-07-28 の JS: Svelte の TypeScript サポート、Chrome 85 beta、Web Speed Hackathon Online</a></li>\n</ul>\n"},"__N_SSG":true}