{"pageProps":{"membersPhotoUrl":{"@koba04":"/assets/photo/f8079885d680213e64e4d706daa4a5ee_400x400.jpeg","@pirosikick":"/assets/photo/a95b52be00e06cd293a6853bc36490bc_400x400.jpeg","@__sakito__":"/assets/photo/erghEqaW_400x400.png","@shisama_":"/assets/photo/A9M8G6DH_400x400.jpg","@nakajmg":"/assets/photo/EKNVNzOg_400x400.jpg","@b4h0_c4t":"/assets/photo/QySbTwnO_400x400.jpg","@__sosukesuzuki":"/assets/photo/7iJNhdua_400x400.jpg"},"frontmatter":{"title":"Cybozu Frontend Monthly","date":"2021-03-02T17:00:00+09:00","slug":"2021-02","connpass":"https://cybozu.connpass.com/event/205864/","streamUrl":"https://www.youtube.com/watch?v=V-qsrYmUHjk","no":8,"members":[{"name":"@koba04","link":"https://twitter.com/koba04"},{"name":"@pirosikick","link":"https://twitter.com/pirosikick"},{"name":"@__sakito__","link":"https://twitter.com/__sakito__"},{"name":"@shisama_","link":"https://twitter.com/shisama_"},{"name":"@nakajmg","link":"https://twitter.com/nakajmg"},{"name":"@b4h0_c4t","link":"https://twitter.com/b4h0_c4t"},{"name":"@__sosukesuzuki","link":"https://twitter.com/__sosukesuzuki"}],"guest":null},"html":"<h3 id=\"smarthr-が-internet-explorer-サポート終了のお知らせを出した\"><a href=\"#smarthr-%E3%81%8C-internet-explorer-%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E7%B5%82%E4%BA%86%E3%81%AE%E3%81%8A%E7%9F%A5%E3%82%89%E3%81%9B%E3%82%92%E5%87%BA%E3%81%97%E3%81%9F\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://smarthr.jp/other/22512\" target=\"_blank\" rel=\"nofollow\">SmartHR が Internet Explorer サポート終了のお知らせを出した</a></h3>\n<ul>\n<li>共有者: nakajmg</li>\n</ul>\n<p>Microsoft が自身のサービスでの IE サポート終了予定を発表してから、国内のサービスからもそれに追従するようにサポート終了のお知らせが出てきています。</p>\n<p>SmartHR に続いて<a href=\"https://support.biz.moneyforward.com/valuepack/news/important/20210226.html\" target=\"_blank\" rel=\"nofollow\">Money Forward も IE サポート終了のお知らせを出しました</a>。</p>\n<p>背景として挙げているのはセキュリティ面、Microsoft Edge の存在、そして<a href=\"https://blogs.windows.com/japan/2020/08/18/microsoft-365-apps-say-farewell-to-internet-explorer-11/\" target=\"_blank\" rel=\"nofollow\">Microsoft 365 における IE11 サポート終了の発表</a>です。\nまた、両者ともに IE サポートの終了月を Microsoft 365 の IE サポート終了の日に合わせて 2021 年 8 月までとしています。</p>\n<p>今後もこの動きに追従する発表が出てきそうです。</p>\n<p>(※追記) <a href=\"https://engineer.crowdworks.jp/entry/2021/02/18/120000\" target=\"_blank\" rel=\"nofollow\">クラウドワークスさんも同時期に IE を推奨ブラウザから外すお知らせを出しています</a>。</p>\n<hr>\n<h3 id=\"using-abortcontroller-as-an-alternative-for-removing-event-listeners--css-tricks\"><a href=\"#using-abortcontroller-as-an-alternative-for-removing-event-listeners--css-tricks\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://css-tricks.com/using-abortcontroller-as-an-alternative-for-removing-event-listeners/\" target=\"_blank\" rel=\"nofollow\">Using AbortController as an Alternative for Removing Event Listeners | CSS-Tricks</a></h3>\n<ul>\n<li>共有者: pirosikick</li>\n</ul>\n<p>AbortController を jQuery の once 関数みたいな一度実行したら消えるタイプのイベントリスナーの代替として使う話。\n<code>mousemove</code>と<code>mouseup</code>のイベントハンドラを、<code>mouseup</code>時に両方削除するようなユースケースの場合、AbortController を使うとスッキリ書ける。</p>\n<hr>\n<h3 id=\"introducing-env-a-better-way-to-read-environment-variables-in-javascript---human-who-codes\"><a href=\"#introducing-env-a-better-way-to-read-environment-variables-in-javascript---human-who-codes\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://humanwhocodes.com/blog/2021/02/introducing-env-javascript-environment-variables/\" target=\"_blank\" rel=\"nofollow\">Introducing Env: a better way to read environment variables in JavaScript - Human Who Codes</a></h3>\n<ul>\n<li>共有者: pirosikick</li>\n</ul>\n<p>ブラウザにサーバーサイドから環境変数を流し込む際に陥りがちな罠と、それを回避するために作られた<code>@humanwhocodes/env</code>について。\n<code>env.required</code>や<code>env.exists</code>は Proxy で実装されている。\n200 行くらいのシンプルなコードなので、<code>@humanwhocodes/env</code>を参考に自前で環境変数をラップしてアクセスする関数を作るのもよさそう。</p>\n<hr>\n<h3 id=\"maximally-optimizing-image-loading-for-the-web-in-2021\"><a href=\"#maximally-optimizing-image-loading-for-the-web-in-2021\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.industrialempathy.com/posts/image-optimizations/\" target=\"_blank\" rel=\"nofollow\">Maximally optimizing image loading for the web in 2021</a></h3>\n<ul>\n<li>共有者: b4h0_c4t</li>\n</ul>\n<p>Core Web Vitals を指標として画像読み込みの最適化する手法を簡単なコード付きで紹介しています。</p>\n<p>半分ほどはブラウザが限定されていますが、手法として覚えておいても損はないかなという感じです。</p>\n<ul>\n<li>Responsive Layout\n<ul>\n<li>画像に width 、 height を設定する</li>\n</ul>\n</li>\n<li>Lazy Rendering\n<ul>\n<li><code>content-visibility</code> を利用する</li>\n</ul>\n</li>\n<li>AVIF\n<ul>\n<li>AVIF 形式の画像を利用する</li>\n</ul>\n</li>\n<li>Load the right number of pixels\n<ul>\n<li>srcset で画面サイズ毎に適切な画像を読み込む</li>\n</ul>\n</li>\n<li>Caching / Immutable URLs\n<ul>\n<li><code>cache-control</code> を利用する</li>\n</ul>\n</li>\n<li>Lazy loading\n<ul>\n<li><code>loading=\"lazy\"</code> 属性を追加する</li>\n</ul>\n</li>\n<li>Asynchronous decoding\n<ul>\n<li><code>decoding=\"async\"</code> 属性を追加する</li>\n</ul>\n</li>\n<li>Blurry placeholder\n<ul>\n<li><code>background-image</code> に blurry image を差し込む</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"focus-visible-周りのブラウザ実装が進んだ\"><a href=\"#focus-visible-%E5%91%A8%E3%82%8A%E3%81%AE%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E5%AE%9F%E8%A3%85%E3%81%8C%E9%80%B2%E3%82%93%E3%81%A0\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>:focus-visible 周りのブラウザ実装が進んだ</h3>\n<ul>\n<li>共有者: sakito</li>\n</ul>\n<p>2 月に<code>:focus-visible</code>まわりでブラウザの動きが多かったのでまとめました。</p>\n<h4 id=\"focus-visible-おさらい\"><a href=\"#focus-visible-%E3%81%8A%E3%81%95%E3%82%89%E3%81%84\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>:focus-visible おさらい</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible\" target=\"_blank\" rel=\"nofollow\">:focus-visible</a>は、タブ移動時のみ要素の<code>outline</code>が表示されるもの。<code>:focus</code>だと要素にクリック時やタブ移動時にフォーカスした際に<code>outline</code>が表示されるので、<code>outline</code>を消しがちだったがそれを避けることができる。</p>\n<h4 id=\"chrome\"><a href=\"#chrome\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Chrome</h4>\n<p><a href=\"https://groups.google.com/a/chromium.org/g/blink-dev/c/gv69rSngHDY\" target=\"_blank\" rel=\"nofollow\">Chrome で:focus-visible が UA style sheet のデフォルトに</a>なりました。</p>\n<p>Chrome 86 から<code>:focus-visible</code>は使用できていたが、<code>UA style sheet</code>は<code>:forcus</code>だったので、下記のような記述が必要だった。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token pseudo-class\">:focus</span><span class=\"token pseudo-class\">:not</span><span class=\"token punctuation\">(</span><span class=\"token pseudo-class\">:focus-visible</span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>今回の変更で<code>:focus-visible</code>が UA style sheet のデフォルトになったので上記の記述は不要になる。</p>\n<p>この変更は<a href=\"https://www.chromestatus.com/features/5658873031557120\" target=\"_blank\" rel=\"nofollow\">Chrome 90</a>から入るぽいです。</p>\n<h4 id=\"firefox\"><a href=\"#firefox\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Firefox</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/85#css\" target=\"_blank\" rel=\"nofollow\">Firefox 85 で:focus-visible が有効に</a>になりました。</p>\n<p>いままで<code>:-moz-focusring</code>の疑似クラスを使用していたが、Firefox 85 で<code>:focus-visible</code>が実装されました。\nFirefoxDevTools でスタイルの切り替えもできるようになっています。</p>\n<h4 id=\"safari\"><a href=\"#safari\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Safari</h4>\n<p><a href=\"https://blogs.igalia.com/mrego/2021/01/28/focus-visible-in-webkit-january-2021\" target=\"_blank\" rel=\"nofollow\">Igalia が Open Prioritization を通して、WebKit に:focus-visible を実装協力</a></p>\n<p>Igalia が<a href=\"https://www.igalia.com/open-prioritization/\" target=\"_blank\" rel=\"nofollow\">Open Prioritization</a>というクラウドファンディングを通して、WebKit に<code>:focus-visible</code>を実装することになり、実装するために WPT のテストを実装したり、実装するにあたった課題を報告している記事です。</p>\n<p>上記でも紹介している Chrome で:focus-visible が UA style sheet のデフォルトになっていない Issue を報告をしているのも Igalia の人なのですが、この PJ を通して発見されたものになります。</p>\n<h3 id=\"littledanproposal-module-fragments\"><a href=\"#littledanproposal-module-fragments\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://github.com/littledan/proposal-module-fragments\" target=\"_blank\" rel=\"nofollow\">littledan/proposal-module-fragments</a></h3>\n<ul>\n<li>共有者: @sosukesuzuki</li>\n</ul>\n<p>3 月の TC39 ミーティングで <a href=\"https://github.com/littledan\" target=\"_blank\" rel=\"nofollow\">@littledan</a> 氏から Module Fragments という Stage 0 のプロポーザルについて発表される予定です。</p>\n<p>Module Fragments は次のようにインラインでモジュールを定義できる構文を導入します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module <span class=\"token string\">\"#foo\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword module\">export</span> <span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Module Fragments は主に webpack や Rollup、Parcel のようなモジュールバンドラーの出力として使われることを想定しています。</p>\n<p>現在のモジュールバンドラーはいくつかの潜在的な問題を抱えています。</p>\n<ul>\n<li>ECMAScript Modules の仕様をエミュレートする必要があるため実装が複雑になる\n<ul>\n<li>しかも ECMAScript Modules に関連する仕様は増え続けるのでその度に追従するための実装をする必要がある</li>\n</ul>\n</li>\n<li>出力のコードにモジュール構造が残らず JavaScript エンジンでの最適化に使うことができないので、パフォーマンスに悪影響が及ぶ可能性がある</li>\n</ul>\n<p>モジュールバンドラーは Module Fragments を使ったコードを出力にすることでこれらの問題を解決することができます。</p>\n<p>手前味噌ですがこれについて解説する記事を書いたので気になる方はご覧ください。</p>\n<p><a href=\"https://sosukesuzuki.dev/posts/stage-0-module-fragments/\" target=\"_blank\" rel=\"nofollow\">https://sosukesuzuki.dev/posts/stage-0-module-fragments/</a></p>\n<hr>\n<h3 id=\"requesting-performance-isolation-with-the-origin-agent-cluster-header\"><a href=\"#requesting-performance-isolation-with-the-origin-agent-cluster-header\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a><a href=\"https://web.dev/origin-agent-cluster/\" target=\"_blank\" rel=\"nofollow\">Requesting performance isolation with the Origin-Agent-Cluster header</a></h3>\n<ul>\n<li>共有者: shisama_</li>\n</ul>\n<p>Site Isolation の Origin で Isolation するための機能の話です。\nHTTP レスポンスヘッダとして<code>Origin-Agent-Cluster: ?1</code>を返すことで iframe で埋め込まれた Same-site cross-origin なページをプロセスレベルで分離することが可能になります。</p>\n<p>たとえば、<code>https://mail.example.com</code> の中に iframe を使って <code>https://chat.example.com</code> が埋め込まれていたとします。\n両者はサブドメインは違えど eTLD+1 は同じなので SameSite となります。Site Isolation は Same-site であればプロセスは 1 つのため、メモリ管理も同じプロセス内で行われます。</p>\n<p>そのため、一方に XSS が埋め込まれてメモリにアクセスできれば、サイドチャネル攻撃により情報を盗まれる可能性があります。\nOrigin レベルで分離することで Same-site でも Cross-origin の場合でも一方に脆弱性があってももう一方への影響を防ぐことができます。\n<code>Origin-Agent-Cluster</code> が有効になっている場合、次のことができなくなります。</p>\n<ul>\n<li>document.domain = \"example.com\" をしても何もしない。書き換えないだけで例外は投げない</li>\n<li><code>postMessage()</code> による <code>WebAssembly.Module</code> を Cross-origin のページに送信できない</li>\n<li><code>SharedArrayBuffer</code> や <code>WebAssembly.Memory</code> を Cross-origin のページに送信できない</li>\n</ul>\n<p>プロセスが同じだと iframe で埋め込んだページがリソースを使いまくっていた場合、埋め込み元のページにも影響していました。しかし、プロセスが分離されると、埋め込み元のことを気にしなくても良くなるといったパフォーマンスの改善にもつながります。<br>\n埋め込み先が重くても埋め込み元は影響を受けない。<br>\nただ、パフォーマンスに関しても本当に速くなるのかは実際動かして確認したほうがいいとのことです。</p>\n<p>ただし、<code>Origin-Agent-Cluster</code> はセキュリティに関する HTTP ヘッダではない、とこの記事には書かれています。次のような理由から origin-keyed agent cluster がセキュリティ機能として考えないほうがいいとされています。その代わり、リソースを分離することでブラウザにリソース割当の優先度決めを助長する方法として考えられます。</p>\n<ul>\n<li>Firefox や Safari では iframe ごとのプロセスの分離が実装されていない</li>\n<li>リソースが限られている Android ではできるだけプロセスを増やさないようにしている\n<ul>\n<li>Site Isolation もパスワード画面など一部でしか適用されていない</li>\n</ul>\n</li>\n<li>ブラウザはプロセスの分離ではなく、スレッドによる分離などを優先して利用するかもしれない</li>\n<li>サイト全体ではなく一部のページにのみ <code>Origin-Agent-Cluster</code> が適用されていた場合、適用されていないページを踏むとブラウザはその Origin を origin keyed cluster としてみなさない</li>\n</ul>\n<details>\n<summary><strong>その他参考文献</strong></summary>\n<ul>\n<li><a href=\"https://blog.jxck.io/entries/2020-05-22/site-isolation.html\" target=\"_blank\" rel=\"nofollow\">Site Isolation 及び Web のセキュリティモデルの更新 | blog.jxck.io</a>\n<ul>\n<li>Site Isolation から Origin Isolation までの流れが紹介されています</li>\n<li>それぞれの参考リンクが網羅的に紹介されています。</li>\n</ul>\n</li>\n<li><a href=\"https://mozaic.fm/episodes/63/cross-origin-info-leaks.html\" target=\"_blank\" rel=\"nofollow\">ep63 Cross Origin Info Leaks | mozaic.fm</a>\n<ul>\n<li>Origin Isolation については mozaic.fm ep63 00:55 ぐらいから解説されてました</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/whatwg/html/pull/6214\" target=\"_blank\" rel=\"nofollow\">Rename <code>Origin-Isolation</code> to <code>Origin-Agent-Cluster</code> by domenic · Pull Request #6214 · whatwg/html</a>\n<ul>\n<li>元々 \"Origin Isolation\" という名前で仕様策定されていたので、調査するときは \"Origin Isolation\" で調べても良さそうです。</li>\n</ul>\n</details>\n</li>\n</ul>\n<hr>\n"},"__N_SSG":true}